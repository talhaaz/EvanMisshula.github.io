<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Evan Misshula</title><link>/</link><description></description><atom:link href="/feeds/emisshula.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 27 Dec 2014 00:00:00 -0500</lastBuildDate><item><title>Emacs dies on popup</title><link>/death-by-pop-up.html</link><description>&lt;h1&gt;Switched to Mac&lt;/h1&gt;
&lt;p&gt;My switch to the Mac meant that I was making more typing mistakes and on one 
them I was always getting to Emacs to freeze.  I looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/Computer-Freezes.jpg" width="450px" alt="img" title="Computer-Freezes.jpg"&gt;&lt;/p&gt;

&lt;p&gt;I switched to the Mac last summer.  I was given one for work.  I would 
never buy one because they put corporate &lt;a href="https://defectivebydesign.org/apple"&gt;malware&lt;/a&gt; on your machine.  However,
it is convenient to have one because I can test my tutorials on this machine.&lt;/p&gt;
&lt;p&gt;Mac does not support a package manager to manage free software which
people install on the Mac.  So there is a community based one called
homebrew through which I installed Emacs.  I started switching between
my Linux laptop and my Mac.  Almost immediately, I ran across a bug.
When I typed Command-p on the Mac instead of M-p, a popup appeared and
asked if I wanted to print.  This happened often because of the different
layouts of the two keyboards.&lt;/p&gt;
&lt;p&gt;I could not dismiss the popup.  The only way to continue working was to 
force-quit Emacs and lose my unsaved work.&lt;/p&gt;
&lt;p&gt;I finally found the right answer &lt;a href="http://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x"&gt;here&lt;/a&gt;.  Unfortunately, I don't have the 
points on SuperUser to vote it up.  The solution is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defadvice yes-or-no-p (around prevent-dialog activate)
  &amp;quot;Prevent yes-or-no-p from activating a dialog&amp;quot;
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  &amp;quot;Prevent y-or-n-p from activating a dialog&amp;quot;
  (let ((use-dialog-box nil))
    ad-do-it))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two functions are almost the same.  One takes care of ``yes or no'' and the other ``y or n''.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Sat, 27 Dec 2014 00:00:00 -0500</pubDate><guid>tag:,2014-12-27:death-by-pop-up.html</guid><category>Emacs</category><category>homebrew</category><category>Mac</category><category>OS X</category><category>Mavericks</category><category>Darwin</category></item><item><title>Reproducible-research-org-mode</title><link>/emacsnyc-rr.html</link><description>&lt;p&gt;o* Update&lt;/p&gt;
&lt;p&gt;On November 3, I gave a talk at the Emacsnyc meetup on reproducible
research.  I will get a link to the presentation up soon.&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/CGnt_PWoM5Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;You can view the presentation:&lt;/p&gt;
&lt;p&gt;&lt;a href="rr.html" target="_blank"&gt;new tab&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;And here is the github:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://github.com/EvanMisshula/rr" target="_blank"&gt;rr repo&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 -0500</pubDate><guid>tag:,2014-11-03:emacsnyc-rr.html</guid><category>Emacs</category><category>reproducibility</category><category>open-science</category></item><item><title>Mac OS X Installation</title><link>/mac-dev-env.html</link><description>&lt;blockquote&gt;
&lt;p&gt;I have developed a Zen-like approach to the operating systems that
people use: 'When you're ready, the right operating system will appear
in your life.' ~Guy Kawasaki is the chief evangelist of Canva, an
online graphic design tool. Formerly, he was an advisor to the
Motorola business unit of Google and chief evangelist of Apple.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="../../images/guy.jpeg" width="350px" alt="guy" title="guy"&gt;&lt;/p&gt;

&lt;h1&gt;Dev Environment&lt;/h1&gt;
&lt;p&gt;A development environment is one where you can make the software you
need to run.  You need this to run the latest free software which is
often only implemented in source code.  Particularly to take advantage
of common mathematical libraries you need a Fortran, C and C++
compiler even if you never use those languages directly.  Apple does
not include it in their default configuration because it does not want
you to create your own software, it want you to buy their software
products (rant over).&lt;/p&gt;
&lt;h1&gt;Obtain the compilers&lt;/h1&gt;
&lt;p&gt;First you need to make sure that you have the latest operating system.
To do that, you need to left click on the Apple icon and read the release.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/osRelease.png" width="350px" alt="os" title="os"&gt;&lt;/p&gt;

&lt;p&gt;Then we have to obtain an &lt;a href="https://appleid.apple.com/"&gt;appleID&lt;/a&gt; including submitting a credit card.
The good news is that they won't charge you.  We just need to obtain
the xcode which has Apple's development tools.  The only ones I have
ever used are the compilers which are FREE software.  Bottom line is,
legally they can't charge for them (&lt;a href="https://www.gnu.org/philosophy/apsl.html"&gt;copyleft&lt;/a&gt;). Search in Google for 
"xCode download".  It will automatically detect your OS and if you have
Mac OS X installed, it will include the free button you need to press
to download it.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/xCode.png" width="350px" alt="xCode" title="xCode"&gt;&lt;/p&gt;

&lt;p&gt;When it finishes downloading it will automatically install and and you 
will see the picture below. The only difference is a small button which 
now says installed. (Yay!)&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/xCodeInstalled.png" width="350px" alt="xCodeInstalled" title="xCodeInstalled"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have any trouble sounding condescending, find a Unix user to
show you how it's done. ~Scott Adams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Obtain an alternate windowing library&lt;/h1&gt;
&lt;p&gt;The next step is to download the xQuartz project which let's the free
software on your machine open new windows.  Software needs to open new
windows if it needs to warn you about something so this is an
essential function.  You can find it at this &lt;a href="http://xquartz.macosforge.org/landing/"&gt;xQuartz link&lt;/a&gt;.  The file
is a dmg.  Since this is not an official Apple product it will be
saved in downloads.  &lt;a href="http://www.ofzenandcomputing.com/how-to-install-dmg-files-mac/"&gt;Here&lt;/a&gt; is a link that explains in detail how to
install a dmg file.  A dmg is disc image file.  You need to left click
on it. That will open an empty box.  See picture below.  Double click
on the box and that will start an installer.  You will need to put in
your password. Also see picture further below.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/xQuartzPkg.png" width="350px" alt="xQuartzPkg" title="xQuartzPkg"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="../../images/xQuartzInstaller.png" width="350px" alt="xQuartzInstalled" title="xQuartzInstalled"&gt;&lt;/p&gt;

&lt;p&gt;You have to log back in and out for xQuartz to take effect.&lt;/p&gt;
&lt;h1&gt;Obtain a package manager&lt;/h1&gt;
&lt;p&gt;Most distributions of Linux come with a package manager to sort out which
software depends on which other libraries.  These were a huge innovation
in the Linux world.  And there is a package manager for Mac OS X. It is 
called &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;. To install it we are going to need the terminal which
is hard to find on a Mac.  You need to left click the launcher icon.  See
picture below.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/launcher.png" width="350px" alt="launcher" title="launcher"&gt;&lt;/p&gt;

&lt;p&gt;Then you need to find the terminal.  It is hiding in the other icon. See
the picture below and left click the similar image on your Mac.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/otherIcon.png" width="350px" alt="otherIcon" title="otherIcon"&gt;&lt;/p&gt;

&lt;p&gt;Then left click the terminal icon, pictured below.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/terminalIcon.png" width="350px" alt="terminalIcon" title="terminalIcon"&gt;&lt;/p&gt;

&lt;p&gt;Now copy the Homebrew installation script (using command-C to copy and 
command V to paste) and paste it inside the terminal as pictured below:&lt;/p&gt;
&lt;p&gt;&lt;img src="../../images/homebrew.png" width="350px" alt="homebrew" title="homebrew"&gt;&lt;/p&gt;

&lt;p&gt;Now press the [enter key].  You will be prompted for your password.  When
Homebrew finishes type &lt;code&gt;brew doctor&lt;/code&gt; at the prompt. If all goes well
you will get a positive message.  As &lt;a href="http://zmjones.com/mac-setup/"&gt;Zed Jones&lt;/a&gt; points out, we still need
to manually set the path. In the terminal type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo emacs /etc/paths&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You will have to change the file to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type Ctrl-x Ctrl-s to save it and Ctrl-x Ctrl-c to quit.&lt;/p&gt;
&lt;h1&gt;Obtain git&lt;/h1&gt;
&lt;p&gt;The first thing we need is git. Git is the source control and
collaboration software that is most popular in the FREE software
world. Type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install git
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Obtain emacs&lt;/h1&gt;
&lt;p&gt;In order to be able to manipulate the files that contain our data and 
present our output, we need to obtain our editor, Emacs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install emacs --cocoa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here again there are some quirks.  On Linux, we would simply use the
Emacs package manager but on Mac we have used the package manager
Homebrew so the Emacs package manager gui install button won't install
because of permission problems.  So we have to use the command interactive 
commands from Emacs.  No big deal, once you figure it out but it took a 
while to find it. I found this &lt;a href="http://howardabrams.com/projects/dot-files/emacs.html"&gt;post&lt;/a&gt; helpful.  So we need to set up the 
Emacs repositories by creating a &lt;em&gt;.emacs&lt;/em&gt; file. Any file with a '.' in front
is a hidden configuration file.  It will not appear when you type &lt;code&gt;ls&lt;/code&gt; for 
list files at the command prompt.  You can edit them in Emacs &lt;code&gt;C-x C-f .emacs&lt;/code&gt;.
Now we have to add the code below.  (Used &lt;code&gt;Command-C&lt;/code&gt; to copy it and &lt;code&gt;Ctrl-Y&lt;/code&gt;
in Emacs to paste/yank it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(require &amp;#39;package)
(setq package-archives &amp;#39;((&amp;quot;org&amp;quot;       . &amp;quot;http://orgmode.org/elpa/&amp;quot;)
                         (&amp;quot;gnu&amp;quot;       . &amp;quot;http://elpa.gnu.org/packages/&amp;quot;)
                         (&amp;quot;melpa&amp;quot;     . &amp;quot;http://melpa.milkbox.net/packages/&amp;quot;)
                         (&amp;quot;marmalade&amp;quot; . &amp;quot;http://marmalade-repo.org/packages/&amp;quot;)))
(package-initialize)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now just after this we can specify a programmatic way to check which
packages are installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defun&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condp&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Emacs Lisp doesn’t come with a ‘filter’ function to keep elements that satisfy&lt;/span&gt;
&lt;span class="s2"&gt;a conditional and excise the elements that do not satisfy it. One can use ‘mapcar’&lt;/span&gt;
&lt;span class="s2"&gt;to iterate over a list with a conditional, and then use ‘delq’ to remove the ‘nil’&lt;/span&gt;
&lt;span class="s2"&gt;values.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delq&lt;/span&gt; &lt;span class="nx"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapcar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcall&lt;/span&gt; &lt;span class="nx"&gt;condp&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defun&lt;/span&gt; &lt;span class="nx"&gt;inverse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condp&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;A filter function, but returns a list of the entries that don&amp;#39;t match the predicate.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delq&lt;/span&gt; &lt;span class="nx"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapcar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcall&lt;/span&gt; &lt;span class="nx"&gt;condp&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defun&lt;/span&gt; &lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Given a list of packages, this will install them from the standard locations.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inverse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;installed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;windows&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Emacs package to get the right environment&lt;/h1&gt;
&lt;p&gt;Now the first thing we should do is correct for another Mac induced 
problem. An Emacs instance started from the graphical user interface
will have a different environment than a sell in a terminal window.
This happens because OS X does not run a shell during login.  If the
environment is different you will get weird behavior when Emacs calls
external utilities like make.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;M-x package-install RET exec-path-from-shell-initialize
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in the &lt;code&gt;.emacs&lt;/code&gt; file add the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(require &amp;#39;exec-path-from-shell)
    (when (memq window-system &amp;#39;(mac ns))
    (exec-path-from-shell-initialize))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point quit emacs &lt;code&gt;C-x C-c&lt;/code&gt; and restart. &lt;/p&gt;
&lt;h1&gt;Emacs package to get the communicate with R (ESS)&lt;/h1&gt;
&lt;p&gt;Here again type &lt;code&gt;M-x package-install RET ess RET&lt;/code&gt;.  This will 
install ESS. Find the &lt;em&gt;.emacs&lt;/em&gt; file by typin &lt;code&gt;C-x C-f .emacs&lt;/code&gt;
and add the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;;ess-mode configuration
(setq ess-ask-for-ess-directory t) 
(setq inferior-R-program-name &amp;quot;/usr/local/bin/R&amp;quot;) 
(setq ess-local-process-name &amp;quot;R&amp;quot;) 
(require &amp;#39;ess-site)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Install R&lt;/h1&gt;
&lt;p&gt;Another weird quirk is that xCode has removed gcc which is the most
common set of compilers in the world.  They are what R expects to
encounter.  There are two alternatives.  You can build a late version
of the compilers via the instructions found at this &lt;a href="http://apple.stackexchange.com/questions/38222/how-do-i-install-gcc-via-homebrew"&gt;link&lt;/a&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install [flags] https://raw.github.com/Homebrew/homebrew-versions/gcc48.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where [flags] should include all the required languages,
e.g. (&amp;#x2013;enable-cxx &amp;#x2013;enable-fortran).  Also see this &lt;a href="https://coderwall.com/p/lqpp8w"&gt;link&lt;/a&gt; for an
example of how to create a symlink to make a newer version the
default.  However I got away with just installing version 4.2 (a seven
year old version of the gcc compilers by installing XCode Command Line
Tools. These are separate from XCode which I found confusing.  You can
install them with xcode-select &amp;#x2013;install).  Then you can just type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install gcc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that &lt;code&gt;gcc&lt;/code&gt; is installed you can install R.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew tap homebrew/science #the R formula has been moved here
brew install r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can test the installation by typing &lt;code&gt;M-x R&lt;/code&gt; in Emacs and 
you should have R inside of Emacs.  Next post will get Python 
set up.  I am betting our 4.2 version of gcc is not going to 
be good enough.&lt;/p&gt;
&lt;h1&gt;Dedication&lt;/h1&gt;
&lt;p&gt;This post is dedicated to Matt Gold and the &lt;a href="http://digitalfellows.commons.gc.cuny.edu/"&gt;GC Digital Fellows&lt;/a&gt; project
who were able to obtain for me not only access to a Mac but insured
that I would have admin rights to install software and create this 
tutorial. They bare no responsibility for any mistakes or omissions 
which are solely the responsiblity of the author.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 30 Jul 2014 15:03:00 -0400</pubDate><guid>tag:,2014-07-30:mac-dev-env.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category><category>OS X</category></item><item><title>Descriptives</title><link>/r-descriptives-ess.html</link><description>&lt;p&gt;&lt;img src="../../images/bragan.jpeg" width="300px" alt="box" title="box"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Say you were standing with one foot in the oven and one foot in an ice bucket. According to the percentage people, you should be perfectly comfortable. ~Bobby Bragan, 1963&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Encountering data&lt;/h1&gt;
&lt;p&gt;Here we will describe the techniques you should use to give yourself and
your readers/bosses/teachers a good feel of the data. This is often called
&lt;em&gt;descriptive statistics&lt;/em&gt;.  In this context a &lt;em&gt;statistic&lt;/em&gt; is a single number
that summarizes your data. It is important to know what type of data you have
and the &lt;em&gt;level of measurement&lt;/em&gt; but we will put off that discussion for a 
a few paragraphs.  I am also putting off a discussion of why statistics is 
important and I am just assuming that this is something you have to do in
order to do your research.&lt;/p&gt;
&lt;p&gt;Here is the daunting part, your data is usually a long list of numbers.  How 
do you describe &lt;em&gt;that&lt;/em&gt;?  Usually the first technique you want to use is to 
graph all of the numbers together.  In fact all of the data has a special name. &lt;/p&gt;
&lt;p&gt;Your data is called the sample distribution.  How do we get that data
into R?  Again, we will defer that question. One nice feature of R is
that it has some data built in.  For example, it has the average amount of 
precipitation for 70 cities in the United States.  We can use this data to 
illustrate a few techniqeus that you can use on your own data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;str(precip)
precip[1:4]

Named num [1:70] 67 54.7 7 48.5 14 17.2 20.7 13 43.4 40.2 ...
- attr(*, &amp;quot;names&amp;quot;)= chr [1:70] &amp;quot;Mobile&amp;quot; &amp;quot;Juneau&amp;quot; &amp;quot;Phoenix&amp;quot; &amp;quot;Little Rock&amp;quot; ...
    Mobile      Juneau     Phoenix Little Rock 
      67.0        54.7         7.0        48.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;str&lt;/code&gt; command gets the structure of the data.  There are a few commands 
for this &lt;code&gt;summary&lt;/code&gt; is the other one I sometimes use. And &lt;code&gt;precip[1:4]&lt;/code&gt; gave 
us the first four elements.  Here are some other built in datasets&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;str(rivers)
str(discoveries)

num [1:141] 735 320 325 392 524 ...
Time-Series [1:100] from 1860 to 1959: 5 3 0 2 0 3 2 3 6 1 ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first thing we want to get a sense of is how the numbers are
distributed.  The best way to this is to use a &lt;em&gt;histogram&lt;/em&gt;.  A
histogram is a bar chart where we bin the count the number of
observations that fall in a defined range.  I allows us to quickly
notice important properties. &lt;code&gt;R&lt;/code&gt; has a function for computing this
built in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hist(precip)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can imporove this by passing two parameters.  The first is designating 
a color (&lt;code&gt;col&lt;/code&gt;) and the second is not computing the frequency counts but
instead dividing by the total observations in our sample.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hist(precip,col=&amp;quot;steel blue&amp;quot;,freq=FALSE)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two important and frustrating things to note about histograms.  They
are highly dependant on the number of bins we choose.  We will show an
example below of manually setting the bins.  Second there is no
general algorithm for setting the number of bins.  We can only repeat
it for an increasing number of bins and stop when the shape is stable.
Now we are also supressing the printing of a title.  For more
parameters of &lt;code&gt;hist&lt;/code&gt; type &lt;code&gt;?hist&lt;/code&gt; at the console prompt.  Histograms
were first introduced by Karl Pearson.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hist(precip,breaks=10,col=&amp;quot;steel blue&amp;quot;,freq=FALSE)

hist(precip,breaks=200,col=&amp;quot;steel blue&amp;quot;,freq=FALSE)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;The ugly history of statistics&lt;/h1&gt;
&lt;p&gt;Karl Pearson was a British mathematician. He is considered the founder
of mathematical statistics.  Dr. Pearson established the first
department of statistics in the world at University College, in
London. However, he was also the founding editor of the &lt;em&gt;Annals of
Eugenics&lt;/em&gt;.  Dr. Pearson advocated for the restriction of immigration
by Jewish people to Britain on the basis that ``this alien Jewish
population is somewhat inferior physically and mentally to the native
population.'' He also thought that war between the races was
inevitable.&lt;/p&gt;
&lt;p&gt;A number of prominent founders of statistics and biostatistics shared
Dr. Pearson's views.  I find that these embarassing facts are often
left out fo the history of statistics.  I think it is important to
remember these ugly warts so that we can separate these important
contributions from the ugly politics of their inventors allowing us to
use our research to make rather than inhibit social progress.&lt;/p&gt;
&lt;h1&gt;Stem and leaf plots&lt;/h1&gt;
&lt;p&gt;Another older technique for exploring data is to draw a stem and leaf
plot.  These were popularized by John Tukey in his book &lt;em&gt;Exploratory Data
Analysis&lt;/em&gt; .  The leading digits of the data are the &lt;em&gt;stems&lt;/em&gt; while
the final digits are the &lt;em&gt;leaves&lt;/em&gt;.  The graph is drawn left to right with 
a vertical line separating the stem and leaves.&lt;/p&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; Robert Randall Bragan an American shortstop, catcher, manager, and coach in Major League Baseball.&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; Pearson, Karl, &amp; Moul, Margaret (1925). "The Problem of Alien Immigration into Great Britain, Illustrated by an Examination of Russian and Polish Jewish Children", Part II, Annals of Eugenics, Vol. I, No. 2, pp. 125-126.&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" class="footnum" href="#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; ukey, John W. (1977). Exploratory Data Analysis (1 ed.). Pearson. ISBN 0-201-07616-0.&lt;/div&gt;


&lt;/div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Thu, 24 Jul 2014 15:03:00 -0400</pubDate><guid>tag:,2014-07-24:r-descriptives-ess.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category></item><item><title>R foundations with ESS</title><link>/r-foundation-ess.html</link><description>&lt;h1&gt;R foundations&lt;/h1&gt;
&lt;p&gt;&lt;img src="../../images/gbox.jpeg" width="300px" alt="box" title="box"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In God we trust. All others must bring data. ~ W. Edwards Demming&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;R console&lt;/h2&gt;
&lt;p&gt;Start an &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt; buffer through &lt;em&gt;ess&lt;/em&gt; by typing &lt;code&gt;M-x R&lt;/code&gt;.  See the earlier
tutorial here or here if that is mystery. At the console type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10+20
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Fri, 04 Jul 2014 15:03:00 -0400</pubDate><guid>tag:,2014-07-04:r-foundation-ess.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category></item><item><title>Emacs Speaks Statistics (ESS) Tutorial</title><link>/r-tutorial-ess.html</link><description>&lt;h1&gt;Making your editor do statistics&lt;/h1&gt;
&lt;p&gt;&lt;img src="../../images/gbox.jpeg" width="300px" alt="box" title="box"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All models are wrong, but some are useful.~George E. P. Box&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Why is ESS useful?&lt;/h2&gt;
&lt;p&gt;ESS makes your command history searchable and modifiable. When you
start doing statistics you think you will always remember what you did
and instantly recall why you did it with that particular data. As you
work on more projects you realize that is a hopeless task. But you
will get questions on what you have done, especially if it was novel
or well thought out.  These questions may not start until months after
your work is done.  Having a command history is the bare minimum of
what you will need to support your work.  We will talk about creating
&lt;em&gt;replicable research&lt;/em&gt; later in these tutorials. Unbelievably, this is
a topic almost never addressed in introductory courses.&lt;/p&gt;
&lt;p&gt;ESS does other tasks for you as well that make interacting with your
data easier.  ESS gives you command line completion of both object
(data) and file names which saves on both typing and mistakes. It
creates so-called &lt;em&gt;Hot Keys&lt;/em&gt; for quick performance of wrote tasks.  It
records a complete transcript of your R session.  It provides an
interface to the R help system. It allows you to edit your data.  It
provides highlighting and proper indentation which makes your code
easier to read for you and others.  It allows you to run either parts 
of files (called regions) or entire files.&lt;/p&gt;
&lt;h2&gt;ESS history&lt;/h2&gt;
&lt;p&gt;The project has been going since before the invention of R.  It was
around in 1989, when it was used to interact with R's proprietary
antecedent Bell Lab's S-language built by Richard Chambers. I am a a
geek about the history of scientific and mathematical ideas. If you
are interested in the history, the &lt;a href="http://en.wikipedia.org/wiki/S_%2528programming_language%2529"&gt;wikipedia&lt;/a&gt; article is a good start.
You can also check out the &lt;a href="http://stat.bell-labs.com/S/"&gt;S-page&lt;/a&gt; at Bell Labs.  For any academic work
I strongly suggest citing the published paper on ESS which is available
at this &lt;a href="http://biostats.bepress.com/uwbiostat/paper173/"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing ESS&lt;/h2&gt;
&lt;p&gt;There are a number of ways to install ESS.  I will create a separate 
series of posts on this.  For many, this will be your first foray
into FREE software and installing for the first time is not easy,
particularly on a Mac.  Here is a much to brief set of instructions:&lt;/p&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;h4&gt;Beginner&lt;/h4&gt;
&lt;p&gt;Install from the ELPA package manager.  You should search for ESS
(C-s, where C-s means press the Control and "s" keys at the same
time).  Refer to Xah Lee's &lt;a href="http://ergoemacs.org/emacs/emacs_package_system.html"&gt;tutorial&lt;/a&gt; on loading from the packackage 
manager.&lt;/p&gt;
&lt;h4&gt;Advanced&lt;/h4&gt;
&lt;p&gt;Download the &lt;a href="http://ess.r-project.org/index.php?Section%3Ddownload"&gt;package&lt;/a&gt;. If you do not have a hidden file called
&lt;em&gt;home/username&lt;/em&gt;.emacs create one and add the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(load &amp;quot;~/langs/emacs/elisp-ds/ess/lisp/ess-site&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Trap&lt;/h4&gt;
&lt;p&gt;Do not install Emacs and ESS from the Ubuntu or Debian repositories.  They
are usually hoplelessly out of date.&lt;/p&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Download the emacs distribution for &lt;a href="http://vgoulet.act.ulaval.ca/en/emacs/windows/"&gt;Windows&lt;/a&gt; from Vincent Goulet.
Remember this is an executable file and you will have to allow it to
work.&lt;/p&gt;
&lt;h3&gt;Mac OS X&lt;/h3&gt;
&lt;p&gt;Download the emacs distribution for &lt;a href="http://vgoulet.act.ulaval.ca/en/emacs/mac/"&gt;Mac OS X&lt;/a&gt;  Vincent Goulet.
Remember this is an executable file and you will have to allow it to
work. Also you have to drag the downloaded file to your apps file. I
have never understood the point of this and I forget to how to do it 
every time.  Here is a &lt;a href="http://apple.stackexchange.com/questions/15306/why-do-i-have-to-drag-my-new-apps-into-the-application-folder"&gt;reference and explanation&lt;/a&gt;.  It always makes me 
think of how Richard Stallman who founded the Free Software movement
hated Steve Jobs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Steve Jobs, the pioneer of the computer as a jail made cool, designed
to sever fools from their freedom, has died.&lt;/p&gt;
&lt;p&gt;As Chicago Mayor Harold Washington said of the corrupt former Mayor
Daley, "I'm not glad he's dead, but I'm glad he's gone." Nobody
deserves to have to die &amp;#x2013; not Jobs, not Mr. Bill, not even people
guilty of bigger evils than theirs. But we all deserve the end of
Jobs' malign influence on people's computing.&lt;/p&gt;
&lt;p&gt;Unfortunately, that influence continues despite his absence. We can
only hope his successors, as they attempt to carry on his legacy, will
be less effective. ~Richard M Stallman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="../../images/rms.jpeg" width="300px" alt="box" title="box"&gt;&lt;/p&gt;

&lt;h2&gt;Testing your installation&lt;/h2&gt;
&lt;p&gt;You have to have installed R.  The instructions are &lt;a href="http://cran.r-project.org/doc/manuals/r-release/R-admin.html"&gt;here&lt;/a&gt;. You have to
have installed Emacs and ESS.  For Windows and Mac Users, you get both
Emacs and ESS when you download from Vincent Goulet. Now type &lt;code&gt;M-x R&lt;/code&gt;.
This will start an R process within a new buffer.  These buffers are
called &lt;em&gt;inferior&lt;/em&gt; as they run a process under Emacs.  The ESS manual
calls them &lt;em&gt;iESS&lt;/em&gt; buffers.&lt;/p&gt;
&lt;p&gt;If something went wrong, note the error and search.  If nothing happened
try searching "Emacs can't find my R installation."&lt;/p&gt;
&lt;h2&gt;Editing R code&lt;/h2&gt;
&lt;p&gt;Indentation is automatic.  If you want to do something special use the
command &lt;code&gt;M-x indent region&lt;/code&gt;. If you don't understand what that means
please refer to my earlier tutorial on &lt;a href="http://EvanMisshula.github.io/r-tutorial-emacs-basics.html"&gt;basic emacs&lt;/a&gt;. It also resets the
underscore "_" to the assignment arrow "&amp;lt;-" which saves a keystroke
many times. If not you can use the underscore by typing &lt;code&gt;M-q _&lt;/code&gt; or just
"_" twice.  You can tab complete objects (data) with &lt;code&gt;C-c TAB&lt;/code&gt; in buffers
that end with .R extension.  It is by the file extension that Emacs 
knows what mode to use.&lt;/p&gt;
&lt;p&gt;Here are the key-bindings for moving around functions:&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Keybinding&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-M-a&lt;/td&gt;
&lt;td class="left"&gt;ess-beginning-of-function&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;C-M-e&lt;/td&gt;
&lt;td class="left"&gt;ess-end-of-function&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;C-M-h&lt;/td&gt;
&lt;td class="left"&gt;ess-mark-function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Viewing help files&lt;/h2&gt;
&lt;p&gt;You can view a help file two ways.  If you are in the R console:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?pbinorm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are not:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-c C-v RET pbinom RET&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;The R session&lt;/h1&gt;
&lt;p&gt;In the &lt;code&gt;*R*&lt;/code&gt; buffer you can run any R command.  R and statistics will be 
the next tutorial.  You can recall your command history.&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;keybinding&lt;/th&gt;
&lt;th scope="col" class="left"&gt;function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;M-p&lt;/td&gt;
&lt;td class="left"&gt;comint-previous-input&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;M-n&lt;/td&gt;
&lt;td class="left"&gt;comint-next-input&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;M-r&lt;/td&gt;
&lt;td class="left"&gt;comint-previous-matching-input&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1&gt;Transcripts&lt;/h1&gt;
&lt;p&gt;You can save an R buffer to create a transcript. You can clean up the
transcript with &lt;code&gt;M-x ess-transcript-clean-buffer&lt;/code&gt;.  You can run
multiple sessions of R.=M-x R= multiple times will generate multiple
processes, e.g. &lt;code&gt;*R*&lt;/code&gt;, &lt;code&gt;*R:2*&lt;/code&gt;, &amp;#x2026;&lt;/p&gt;
&lt;h1&gt;Sending code from an R buffer to an R session&lt;/h1&gt;
&lt;p&gt;If you only have one R session (typical), it will automatically be
associated with the R buffer.  Otherwise you can associate the buffer
with &lt;code&gt;C-c C-s&lt;/code&gt;.  Here are the bindings for sending code:&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Keybinding&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;`C-c C-j`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-line`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c M-j`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-line-and-go`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c C-f`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-function`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c M-f`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-function-and-go`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c C-r`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-region`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c M-r`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-region-and-go`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c C-b`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-buffer`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c M-b`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-buffer-and-go`&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class="left"&gt;`C-c C-n`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-line-and-step`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;About 90% of the time I only use:&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;Keybinding&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;`C-c C-r`&lt;/td&gt;
&lt;td class="left"&gt;`ess-eval-region`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Next we are on to statistics!!&lt;/h2&gt;

&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; Box &amp; Draper (1987), Empirical model-building and response surfaces, Wiley, p. 424.&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; Windows 8 hides the file extension by default. You can change
this evil behavior by seting the environment variable.&lt;/div&gt;


&lt;/div&gt;

&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 02 Jul 2014 15:03:00 -0400</pubDate><guid>tag:,2014-07-02:r-tutorial-ess.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category></item><item><title>Intro to basic Emacs for statistics</title><link>/r-tutorial-emacs-basics.html</link><description>&lt;h1&gt;Emacs&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;What I cannot build, I do not understand. — Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Why Emacs?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This section is borrows heavily from &lt;a href="http://www.damtp.cam.ac.uk/user/sje30/ess11/"&gt;Stephen Elgen&lt;/a&gt; and &lt;a href="http://web.psung.name/emacs/2009/part1.html"&gt;Phil Sung&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The long answer (though still far from complete)&lt;/h3&gt;
&lt;p&gt;Emacs provides the same editing commands available for each language
you are using.  This is a big advantage if you are using a variety of
tools to solve a given problem. Right now you care about using R.
Soon you will realize that you may need a database.  Databases don't
naturally speak R.  They speak Structured Querey Language (SQL).
Emacs can speak SQL.  You may need to create a web program.  You will
need to speak Python or Ruby.  Emacs can speak python or ruby.&lt;/p&gt;
&lt;p&gt;Instead of a graph, you may want to create an interactive
vizualization using d3.js.  Again Emacs can edit javascript.  You may
need to turn your report into a LaTex report, again Emacs speaks Latex
or HTML.  &lt;/p&gt;
&lt;p&gt;Otherwise you might use R-studio for R, Eclipse for python,
Gedit or Notepad++ for LaTex, Webstorm for Javascript, Netbeans for
Java, phpMyAdmin for SQL.  You don't want to learn a new editor every
time you use a new tool.&lt;/p&gt;
&lt;p&gt;Also, as we will see, there are a large set of tools available at all
times. Emacs lets us move text between tasks easily.  Because Emacs
exposes its source code, it easy to extend.  There is also a facillity
for creating macros to accomplish one off tasks.  The language Emacs
is written in, Elisp, allows us to add new features. These new
features don't require you to restart Emacs, it is a fully dynamic
environment.&lt;/p&gt;
&lt;h3&gt;The short answer&lt;/h3&gt;
&lt;p&gt;Emacs is an editor for code. Emacs is an Integrated Development
Environment (IDE) for any language you will ever need (including R).
Emacs is a terminal emulator. Emacs is a file manager.  And Emacs can
show the differences between files and integrate with all version control
systems.  If you want to build something, then Emacs is the right environment&lt;/p&gt;
&lt;h2&gt;History of Emacs&lt;/h2&gt;
&lt;h3&gt;Brief outline&lt;/h3&gt;
&lt;p&gt;The chief architect of Emacs is Richard Stallman (&lt;a href="https://www.fsf.org/about/staff-and-board"&gt;RMS&lt;/a&gt;).  He is the
founder of the Free Software foundation. Richard developed a number of
widely used software components of GNU, including the original Emacs,
the GNU Compiler Collection, the GNU symbolic debugger (gdb), GNU
Emacs, and various other programs for the GNU operating system. He
invented the idea of copyleft and licenses that allow for copying.
When he invented it, he and the other principal inventor &lt;a href="https://labs.oracle.com/pls/apex/f?p%3Dlabs:bio:0:120"&gt;Guy Steele&lt;/a&gt;
were in researchers at the artificial intelligence lab at MIT, &lt;a href="http://www.csail.mit.edu/"&gt;CSAIL&lt;/a&gt;.
They were both graduate students of Gerald J Sussman (&lt;a href="http://groups.csail.mit.edu/mac/users/gjs/biography.html"&gt;GJS&lt;/a&gt;) who was
working with lisp variant languages to solve decision problems.&lt;/p&gt;
&lt;p&gt;Emacs has evolved from a terminal only editor to one with a rich
graphical support.  Emacs is capable through (tramp mode) of editing
files on remote machines.  This means that you can edit files that
need to run on a machine that you share such as an Amazon cluster
(AWS) or a super computer. Don't worry we will start much smaller!&lt;/p&gt;
&lt;p&gt;Emacs development has been undergoing a renissaince since the
development of org-mode.  Prior development cycles had been slow.  As
of this writing, the latest Emacs version is 24.3 and org-mode is
8.2.5.  Prior development cycles had been slow.  Also in the 1990's
Emacs split with more graphic support being available &lt;a href="http://www.xemacs.org/"&gt;XEmacs&lt;/a&gt;.  At
least two other variants are still maintained &lt;a href="http://aquamacs.org/"&gt;Aquamacs&lt;/a&gt; for Mac OS X and
&lt;a href="http://ergoemacs.org/"&gt;Ergo-Emacs&lt;/a&gt; which claims to be easier on your fingers.  The inventor of
Ergo-Emacs, &lt;a href="http://xahlee.org/"&gt;Xah Lee&lt;/a&gt;, is a prolific contributor of tutorials and other
resources to the Emacs community.&lt;/p&gt;
&lt;h2&gt;Where do your documents live?&lt;/h2&gt;
&lt;p&gt;Your documents live on Disk.  However if you use a modern graphical 
user interface it is not always easy to find out where the document 
you care about is.  Your docuents folder is a subdirectory.  My 
user name is 'evan'. In linux, my documents are in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/evan/Documents
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Mac OS X and Windows 8, my documents are in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/Users/evan/Documents
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You create a document by asking Emacs to find a document that does not
exist yet.  Before we can do this you have to understand the instructions
this tutorial is going to give.  So we need to define certain keystrokes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TAB&lt;/code&gt; is the TAB (indent) key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RET&lt;/code&gt; is the Return (carriage return, enter) key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-h&lt;/code&gt; means press control key AND ``h'' together&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESC-h&lt;/code&gt; means press ESC key THEN ``h''&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-h&lt;/code&gt; means press ALT or Meta key AND ``h'' together.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-C-h&lt;/code&gt; means press Meta or Alt while pressing  h and control key.  OR
    (if no meta/alt): ESC THEN (control and h keys together).&lt;/li&gt;
&lt;li&gt;Older keyboards (and sometimes older Macs) without ALT or Meta
    lead to confusion between ESC and Meta, but ideally they should
    be different.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do this start Emacs and find the file ``practice.org''.  So if you are 
on Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x C-f /home/evan/Documents/practice.org
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are on Windows or Mac:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x C-f /Users/evan/Documents/practice.org
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see a blank screen, you have done it right.&lt;/p&gt;
&lt;h2&gt;Every time you press a key&amp;#x2026;you call a function&lt;/h2&gt;
&lt;p&gt;This is going to seem pedantic but I am betting you will refer back to
this.  It is easy to get lost with keypresses, keystrokes and
keybindings. When you type the letter "a", that is called a &lt;em&gt;keystroke&lt;/em&gt;.
A &lt;em&gt;keybinding&lt;/em&gt; is the function that is bound to a combiantion of
&lt;em&gt;keystrokes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the most important keybindings is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M-x&lt;/code&gt; is bound to execute-extended-command, which allows you to run a
    command by name (there are many commands that are not bound to
    keys).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Rember that the &lt;code&gt;M-x&lt;/code&gt; is probably &lt;code&gt;Alt-x&lt;/code&gt; on your machine.) Another
important keystroke combination is &lt;code&gt;C-g&lt;/code&gt; is bound to Quit which will
end the command.  If you have typed &lt;code&gt;M-x&lt;/code&gt; now, then type &lt;code&gt;C-g&lt;/code&gt; to
Quit.  Mapping between keybindings and commands is flexible; can
change on fly.&lt;/p&gt;
&lt;h2&gt;Moving around&lt;/h2&gt;
&lt;p&gt;I find this picture from Phil Sung helps me remember how to move:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/EvAtWork.png" width="300px" alt="img" title="arrows.png"&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;C&lt;span class="o"&gt;-&lt;/span&gt;v    Move forward one screenful
M&lt;span class="o"&gt;-&lt;/span&gt;v    Move backward one screenful
C&lt;span class="o"&gt;-&lt;/span&gt;l    Clear and redraw screen
M&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  Meta&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;right&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; moves forward a word
M&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;  Meta&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;left&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; moves back a word
M&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   Meta&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;up&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; move up a paragraph
M&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;   Meta&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;down&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; move down a paragraph
M&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;   Meta&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;less than&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; move to file start
M&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   Meta&lt;span class="o"&gt;-&amp;lt;&lt;/span&gt;greater than&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; move to file end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of the squiggly brace &lt;code&gt;{&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt; the up or down arrow will work
as well.&lt;/p&gt;
&lt;h2&gt;Cut and paste&lt;/h2&gt;
&lt;p&gt;Instead of &lt;code&gt;C-c&lt;/code&gt; to copy and &lt;code&gt;C-v&lt;/code&gt; to paste, Emacs has older
keybindings. This seems strange&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-d    Delete
C-k    Kill from the cursor position to
       end of line
C-y    Recover/Paste (Yank) killed text
       (repeat to copy)
M-y    recover former killed text (after C-y).
       Repeat to go back through stack).
C-x u  _U_ndo  (multiple undo/redo)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the payoff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;point&lt;/em&gt; is current location of cursor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;mark&lt;/em&gt; &lt;code&gt;C-SPC&lt;/code&gt; to define another point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;region&lt;/em&gt; is text between mark and point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-w&lt;/code&gt; kills from point to mark.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-y&lt;/code&gt; yanks that text back.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Loading/saving files&lt;/h2&gt;
&lt;p&gt;Now we can look at the commands to find files and see the buffers
we have loaded into Emacs.  Emacs actually does not save all of your
changes to the file.  Emacs makes a copy of your file on disk to a
copy, called a &lt;em&gt;buffer&lt;/em&gt;. You make all of your changes to the buffer and 
when you write the file to disk, it replaces the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x C-f  _F_ind a file
C-x C-s  _S_ave the file
C-s C-w  _W_rite the file to a new name
If you find a second file with C-x C-f,
the first file remains inside Emacs.
You can switch back to it by finding it
again with C-x C-b.  This way you can get
quite a number of files inside Emacs.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;Here is how you work with the buffers that you have loaded into Emacs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x 0      Move between windows
           (Oh, not Zero!)
C-x 1      One window
           (i.e., kill all other windows).
C-x 2      Split horizontally
C-x 3      Split vertically
C-x b      Switch to new _b_uffer
C-x C-b    List _b_uffers
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Search and replace&lt;/h2&gt;
&lt;p&gt;Here are the commands for searching and replacing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;M-x (then) replace-string
           Replace string
M-x (then) query-replace-string
           Will ask you, for each match,
           if you really want to replace
           the old string with the new one.
C-s        _S_earch forward (repeat to
           reuse past search strings)
C-r        Search _R_everse (repeat to
           reuse past search strings)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Quitting and getting help&lt;/h2&gt;
&lt;p&gt;Here are the commands for quitting and getting help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-h or C-h ?    _H_elp
C-h c (command) _H_elp on this _c_ommand

C-u 8 (character or command)
             Repeat character/command 8 times

C-g          Stop, unhang.
C-x C-c      Stop and exit (_c_lose) Emacs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Macros&lt;/h2&gt;
&lt;h3&gt;Repeating yourself&lt;/h3&gt;
&lt;p&gt;Repeat C-n ten times:&lt;/p&gt;
&lt;p&gt;C-u 10 C-n&lt;/p&gt;
&lt;p&gt;C-u 70 #&lt;/p&gt;
&lt;h3&gt;Keyboard macros&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;C-x (&lt;/code&gt; lots of stuff  &lt;code&gt;C-x )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Can include counters.  e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x ( TAB step C-x C-k C-i RET C-x )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will make:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;step 0
step 1
step 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#x2026;&lt;/p&gt;
&lt;p&gt;(info "(emacs)Keyboard Macros")&lt;/p&gt;
&lt;p&gt;I use this all the time to automate boring editing functions all
the time!!&lt;/p&gt;
&lt;h2&gt;Modes&lt;/h2&gt;
&lt;p&gt;Modes contain specialisations (commands/variables) for different
languages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Major modes are defined for different languages (C, latex, R,
    python, &amp;#x2026;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistency across modes where possible (e.g. commands for
    commenting, indentation).  Keybindings consistent.  &lt;em&gt;Font lock&lt;/em&gt;
    also consistent, e.g. comments in red.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Major mode decided typically based on buffer name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-h m&lt;/code&gt; describes features available in current buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Completion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TAB completion where possible, e.g &lt;code&gt;M-x describe- TAB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting help&lt;/h2&gt;
&lt;p&gt;Here is how to get help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-h m       describe mode 
C-h k       describe key  
C-h i       info          
C-h t       tutorial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out &lt;a href="http://emacswiki.org"&gt;http://emacswiki.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It also lists cool packages (or libraries) you can add to Emacs 
to make it do more.&lt;/p&gt;
&lt;h2&gt;libraries&lt;/h2&gt;
&lt;p&gt;Emacs' &lt;code&gt;load-path&lt;/code&gt; controls which directories are searched.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defun init_ess ()
&amp;quot;initialize ess&amp;quot;
(locate-library &amp;quot;ess&amp;quot;)
(add-to-list &amp;#39;load-path &amp;quot;~/langs/emacs/org-mode/lisp&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or to look up the definition of a function, try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ess&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dirs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hooks&lt;/h2&gt;
&lt;p&gt;Hooks are usually the way you set up Emacs to act on a file you
want to behave in a certain way.&lt;/p&gt;
&lt;p&gt;Hooks are run e.g. after major-mode has been created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(defun init_eldoc()
(add-hook &amp;#39;emacs-lisp-mode-hook &amp;#39;turn-on-eldoc-mode))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compare the following two versions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;; version 1
(defun my-ess-hook ()
  &amp;quot;Add my keybindings to ESS mode.&amp;quot;
  (local-set-key (kbd &amp;quot;C-j&amp;quot;) &amp;#39;ess-eval-line-and-step))

(add-hook &amp;#39;R-mode-hook &amp;#39;my-ess-hook)

;; version 2
(add-hook &amp;#39;R-mode-hook
          &amp;#39;(lambda ()  (local-set-key (kbd &amp;quot;M-RET&amp;quot;)
                                      &amp;#39;ess-R-use-this-dir)))
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate><guid>tag:,2014-07-01:r-tutorial-emacs-basics.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category></item><item><title>Intro to Emacs Speaks Statistics</title><link>/r-tutorial-intro-ess.html</link><description>&lt;h1&gt;Emacs Speaks Statistics (ESS)&lt;/h1&gt;
&lt;p&gt;ESS is a library (package) for Emacs which allows it to interact with
a number of statistical packages including S+, R, SaS, SPSS and Stata.
For the purpose of these notes.  We will only deal with R.  It allows
the command history to be searchable and modifiable.  It allows for the 
command line completion of both filenames and objects.  It creates Hot-
keys for commonly used commands in R.  It records a complete transcript 
of our R session.  It provides a interface to the help system.  It allows
us to edit R objects/data structures.  When we edit code in ESS, it provides
indentation and highlighting which makes code easier to read and understand.
Ess allows us to evaluate arbitrary regions of a file.  Finally it allows
us to load files into R for evaluation.&lt;/p&gt;
&lt;h1&gt;History outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;3 branches: S-mode, SAS-mode, Stata-mode&lt;/li&gt;
&lt;li&gt;S-mode: 1989, 2 groups managing the project before (Bates/F
    Ritter/E Kademan, M Meyer, DM Smith).
    R added in 1995 (Rossini/Maechler)&lt;/li&gt;
&lt;li&gt;SAS: '94, Tom Cook ('92, John Sall, SAS).  Integrated '95-6, Rossini&lt;/li&gt;
&lt;li&gt;Stata-mode: 1997, Thomas Lumley. Added 1997 (Rossini).&lt;/li&gt;
&lt;li&gt;1997: last major restructuring (``grand unification'')&lt;/li&gt;
&lt;li&gt;2004: switch leaders: Maechler takes over&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate><guid>tag:,2014-07-01:r-tutorial-intro-ess.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category></item><item><title>Intro to R with Emacs-Speaks-Statistics</title><link>/r-tutorial.html</link><description>&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;A number of my colleagues need to analyze data and are learning a
programming language for the first time.  It does not need to be said,
this is a very heavy lift and occurs in the presence of a wide diversity
of well intentioned opinion.  It also occurs in the presence of academic
bullshit.  This is not well intentioned.  It is designed to sell books and 
software licenses.  It is my opinion that the appropriate first scripting 
language to learn for the aspiring social scientist is &lt;a href="http://www.r-project.org/"&gt;R&lt;/a&gt;. Arguements could 
be made for perl, python or lisp.  I think these great languages can be learned
later.  For describing relationships with data and graphing results, &lt;a href="http://www.r-project.org/"&gt;R&lt;/a&gt; has a great
set of libraries.&lt;/p&gt;
&lt;h1&gt;R Front ends&lt;/h1&gt;
&lt;p&gt;There are a number of front-ends for &lt;a href="http://www.r-project.org/"&gt;R&lt;/a&gt;.  The most popular of which is
R-studio. I think it leaves much to be desired.  It is also produced
by a company that sells enhancements to &lt;a href="http://www.r-project.org/"&gt;R&lt;/a&gt; that most users will never
need.  I find the better and more cost effective solution to be
&lt;a href="http://ess.r-project.org/"&gt;Emacs-Speaks-Statistics (ESS)&lt;/a&gt;. Much of the power of the language comes
from being able to read from files and streams.  Combining this with 
the uber editor &lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; only makes sense.  For many data manipulation 
problems the student can solve it either with either tool.&lt;/p&gt;
&lt;p&gt;The intellectual history of this tutorial is taken from Charles
DiMaggio's excellent &lt;a href="http://www.columbia.edu/~cjd11/charles_dimaggio/DIRE/styled-4/styled-6/"&gt;introduction to R&lt;/a&gt; and two brilliant tutorials
from Stephen Elgen &lt;a href="http://web.warwick.ac.uk/statsdept/user2011/tutorials/Eglen.html"&gt;An introduction to ESS from 2011&lt;/a&gt; and &lt;a href="http://sje30.github.io/2014-01-07-cam/"&gt;Caimbridge R
bootcamp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is our introduction:&lt;/p&gt;
&lt;h3&gt;Emacs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why Emacs&lt;/li&gt;
&lt;li&gt;History of Emacs&lt;/li&gt;
&lt;li&gt;Moving around&lt;/li&gt;
&lt;li&gt;Cut and paste&lt;/li&gt;
&lt;li&gt;Loading/saving files&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Search and replace&lt;/li&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;li&gt;Modes&lt;/li&gt;
&lt;li&gt;Completion&lt;/li&gt;
&lt;li&gt;Getting help&lt;/li&gt;
&lt;li&gt;libraries&lt;/li&gt;
&lt;li&gt;Hooks&lt;/li&gt;
&lt;li&gt;Philosophy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ESS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Why ESS?&lt;/li&gt;
&lt;li&gt;History of ESS&lt;/li&gt;
&lt;li&gt;ESS Installation&lt;/li&gt;
&lt;li&gt;Editing and viewing R code&lt;/li&gt;
&lt;li&gt;Making comments&lt;/li&gt;
&lt;li&gt;Indenting your code.&lt;/li&gt;
&lt;li&gt;Viewing help files&lt;/li&gt;
&lt;li&gt;Making help files (.Rd)&lt;/li&gt;
&lt;li&gt;Inferior ESS Processes (&lt;code&gt;*R*&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Which version of R will it find?&lt;/li&gt;
&lt;li&gt;What can I do in &lt;code&gt;*R*&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What is emacsclient?&lt;/li&gt;
&lt;li&gt;Transcripts&lt;/li&gt;
&lt;li&gt;How many versions of R can I run?&lt;/li&gt;
&lt;li&gt;Sending code from an R buffer to &lt;code&gt;*R*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customizing ESS&lt;/li&gt;
&lt;li&gt;When things go wrong with ESS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Org Mode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;intro&lt;/li&gt;
&lt;li&gt;exporting to LaTeX or html&lt;/li&gt;
&lt;li&gt;R examples&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;R language&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;introduction&lt;/li&gt;
&lt;li&gt;foundations&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;li&gt;packages&lt;/li&gt;
&lt;li&gt;graphics&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Advanced stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;power&lt;/li&gt;
&lt;li&gt;web/online&lt;/li&gt;
&lt;li&gt;bayes (multilevel, hierarchical)&lt;/li&gt;
&lt;li&gt;spatial&lt;/li&gt;
&lt;li&gt;meta-analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More to come&amp;#x2026;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Sun, 29 Jun 2014 00:00:00 -0400</pubDate><guid>tag:,2014-06-29:r-tutorial.html</guid><category>Emacs</category><category>Rstats</category><category>ESS</category></item><item><title>LSE recommends ending Drug Wars</title><link>/lse-ernie.html</link><description>&lt;p&gt;My collaborator and friend Ernie Drucker was recently at the London
School of Economics where he joined the expert panel on how to end the
unproductive and wasteful drug wars. You can see his talk below.&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/wys4j&lt;sub&gt;74o7a&lt;/sub&gt;&amp;ouput=embed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The complete report is available here as a (&lt;a href="http://www.lse.ac.uk/IDEAS/publications/reports/pdf/LSE-IDEAS-DRUGS-REPORT-FINAL-WEB.pdf"&gt;pdf&lt;/a&gt;).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 21 May 2014 23:37:00 -0400</pubDate><guid>tag:,2014-05-21:lse-ernie.html</guid><category>Documentaries</category><category>short</category></item><item><title>intro to r and ess</title><link>/r-intro.html</link><description>&lt;h1&gt;credit&lt;/h1&gt;
&lt;p&gt;I am trying to explain the ethos and social convention of
FREE software.  People have created software and they let you 
use it and modify it for free.  Is only polite to extend them
&lt;p&gt;&lt;img src="images/the-good-artist-banksy.jpg" width="300px" alt="steal" style="float:left" title="banksy.jpg"&gt;&lt;/p&gt;
academic courtesy and cite them for their contribution.  Also it 
makes sense because you point your audience to original sources for 
reference.  With links instead of or in addition to bibliographic 
citations you actually make it easy to learn and dive deeper.&lt;/p&gt;
&lt;h1&gt;Our intellectual heritage&lt;/h1&gt;
&lt;h1&gt;what is r?&lt;/h1&gt;
&lt;p&gt;a flexible, free tool for the description, exploration and analysis of
data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a calculator&lt;/li&gt;
&lt;li&gt;statistical libraries&lt;/li&gt;
&lt;li&gt;graphing program&lt;/li&gt;
&lt;li&gt;a domain specific programming language&lt;/li&gt;
&lt;li&gt;a means of simulating phenomena of interest&lt;/li&gt;
&lt;li&gt;a means of creating reproducible results&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Mon, 19 May 2014 00:00:00 -0400</pubDate><guid>tag:,2014-05-19:r-intro.html</guid><category>emacs</category><category>rstats</category><category>ess</category></item><item><title>No More War...on Drugs</title><link>/no-more-drug-war.html</link><description>&lt;p&gt;The War on Drugs is killing our communities. Please share #NoMoreDrugWar&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/EmBHnk78Q_4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Every day, more americans agree the war on drugs has failed and must
change. the smarter sentencing act will save billions of dollars and
ease dangerous overcrowding in prisons by reducing sentences for
non-violent drug offenders. it will also help strengthen communities
and reduce racial injustice. ask your members of congress to pass the
smarter sentencing act. it's a vital first step.&lt;/p&gt;
&lt;p&gt;learn more about the issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.thehouseilivein.org"&gt;the house i live in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.drugpolicy.org"&gt;drug policy alliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sentencingproject.org"&gt;the sentencing project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Sun, 18 May 2014 23:37:00 -0400</pubDate><guid>tag:,2014-05-18:no-more-drug-war.html</guid><category>Documentaries</category><category>short</category></item><item><title>Emacs-IPython-Update</title><link>/emacsnyc-IPython.html</link><description>&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;On May 5, I gave a lightning talk at the Emacsnyc meetup on the state
of the Emacs IPthon notebook.  A big thank you to &lt;a href="http://www.tabfugni.cc"&gt;Eric&lt;/a&gt; from
&lt;a href="http://emacsnyc.org"&gt;http://emacsnyc.org&lt;/a&gt; for his extraordinary linux vs audio-visual
equipment efforts.&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/dgcBKz03lK8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 14 May 2014 23:37:00 -0400</pubDate><guid>tag:,2014-05-14:emacsnyc-IPython.html</guid><category>Emacs</category><category>emacs-ipython-notebook</category><category>ipython</category><category>tutorial</category></item><item><title>CecilyMcMillan</title><link>/CecilyMcMillan.html</link><description>&lt;p&gt;The Judge would be wise to listen to a &lt;a href="http://www.scribd.com/doc/222954383/Jury-Letter"&gt;jury&lt;/a&gt; that understands the
pointlessness of &lt;a href="http://blogs.wsj.com/metropolis/2014/05/12/city-council-members-call-for-leniency-for-occupy-wall-street-protestor/?mg%3Dblogs-wsj&amp;amp;url%3Dhttp%25253A%25252F%25252Fblogs.wsj.com%25252Fmetropolis%25252F2014%25252F05%25252F12%25252Fcity-council-members-call-for-leniency-for-occupy-wall-street-protestor"&gt;incarceration of the harmless&lt;/a&gt;. #MasssIncarceration
 #Justice4Cecily #NoMoreDrugWar&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/Cecily.jpg" width="300px" alt="img" title="Cecily.jpg"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="../images/jury.png" width="600px" alt="img" title="jury.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Thu, 08 May 2014 15:02:00 -0400</pubDate><guid>tag:,2014-05-08:CecilyMcMillan.html</guid><category>overcriminalization</category><category>occupy</category></item><item><title>Tubman Yortzight</title><link>/tubman-yortzight.html</link><description>&lt;blockquote&gt;
&lt;p&gt;"Most that I have done and suffered in the service of our cause has
been in public, and I have received much encouragement at every step
of the way. You, on the other hand, have labored in a private way. I
have wrought in the day—you in the night. … The midnight sky and the
silent stars have been the witnesses of your devotion to freedom and
of your heroism.” ~Fredrick Douglas (on Harriet Tubman)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="../images/tubman.jpg" width="650px" alt="img" title="tubman.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Thu, 08 May 2014 15:02:00 -0400</pubDate><guid>tag:,2014-05-08:tubman-yortzight.html</guid><category>slavery</category><category>heroes</category></item><item><title>Arrest tweets</title><link>/arrest-tweet.html</link><description>&lt;p&gt;Of course, one reason why it might be unprecedented is that other
police forces might find it prurient, ludicrous, voyeuristic, perverse
or merely a monstrous waste of time, money and a cell
phone. #TweetingArrests &lt;/p&gt;
&lt;p&gt;&lt;img src="../images/george0.png" width="650px" alt="img" title="george0.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Fri, 02 May 2014 15:02:00 -0400</pubDate><guid>tag:,2014-05-02:arrest-tweet.html</guid><category>policing</category><category>public-shame</category><category>sex-workers</category></item><item><title>Ban the box</title><link>/ban-the-box.html</link><description>&lt;p&gt;NYC is considering banning private employers from asking about
criminal convictions on employment applications.  If NYC passes this,
it is a game changer.  Once again Jumaane Williams is leading the
charge on behalf of the working poor.
-   &lt;a href="http://online.wsj.com/news/articles/SB10001424127887323997004578640623464096406"&gt;wsj-online&lt;/a&gt;
-   &lt;a href="http://www.cssny.org/news/entry/watch-fair-chance-act-would-ban-the-box-in-nyc"&gt;cssny&lt;/a&gt;
-   &lt;a href="http://fairchancenyc.wordpress.com/"&gt;fairChance.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/banBox.jpg" width="600px" alt="img" title="banBox.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Fri, 02 May 2014 15:02:00 -0400</pubDate><guid>tag:,2014-05-02:ban-the-box.html</guid><category>reentry</category><category>jobs</category></item><item><title>IG defanged at DoJ</title><link>/IG-defanged-at-doj.html</link><description>&lt;p&gt;Cases check in but they don't check out. #DAsGoneWild Who gets to
watch the watchers?&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/Cecily.jpg" width="300px" alt="img" title="Cecily.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 30 Apr 2014 15:02:00 -0400</pubDate><guid>tag:,2014-04-30:IG-defanged-at-doj.html</guid><category>DAsGoneWild</category><category>judicial hypocracy</category></item><item><title>PRI-resources</title><link>/pri-reentry-resources-nyc.html</link><description>&lt;h1&gt;Resource map&lt;/h1&gt;
&lt;p&gt;The amazing Sheyla Delgado and I did some mapping for the &lt;a href="http://johnjayresearch.org/pri/"&gt;Prisoner
Reentry Institute&lt;/a&gt;. This map has
some resources for returning prisoners.&lt;/p&gt;
&lt;iframe src="https://mapsengine.google.com/map/embed?mid=zturmsFXEOVk.k86YVp1bBWBs&amp;output=embed" width="660" height="480"&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Fri, 24 Jan 2014 15:02:00 -0500</pubDate><guid>tag:,2014-01-24:pri-reentry-resources-nyc.html</guid><category>Prisoner Reentry</category><category>maps</category></item><item><title>Emacs IPython Notebook and "ESS in the Cloud"</title><link>/emacs-ipython-notebook-and-ess-in-the-cloud.html</link><description>&lt;h1&gt;My usage history&lt;/h1&gt;
&lt;p&gt;Back in 2009, one of the first advantages that made me play around
with &lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; again when I went back to graduate school was
&lt;a href="http://ess.r-project.org/index.php?Section%3Dhome"&gt;Emacs-Speaks-Statistics&lt;/a&gt;. It allowed me to avoid the pain of using the
R-console which was frankly a miserable experience. The deficiencies
of that interface stood in stark contrast to the enormous benefits to
be had by using a &lt;a href="http://www.fsf.org/about/"&gt;FREE&lt;/a&gt; and open source statistical computing
environment where each function could be examined and verified. Data
analysis was no longer tied to a machine with a working license
server. I could now work from home or even on my lengthy commute from
Coney Island to school in Manhattan.  Three dead hours of my day now
became my most productive time. Although I do not have the resources
to donate to the project I have cited it in my scientific work and
encourage others who have used it to do the same.&lt;/p&gt;
&lt;h1&gt;R vs Python&lt;/h1&gt;
&lt;p&gt;Although R has continued to improve since I started using it. The
Python Data community has truly blossomed, albeit from a much lower
base. Tools like numpy, scipy networkx, NLTK, sympy, pandas, rpy2 and
particularly IPython have made Python a formidable competitor in the
scientific computing space. In fact I am not going to give links to
the source code because best practice is to install them in a virtual
environment using pip.  The best instructions I have found for Linux
are &lt;a href="http://technomilk.wordpress.com/2011/07/27/setting-up-our-django-site-environment-with-pythonbrew-and-virtualenv/"&gt;here&lt;/a&gt;.  I will write a tutorial for Mac and Windows next week. The
reason why IPython has had such a profound impact are human rather
than technical.  IPython prints detailed error messages where as R
prints error messages that are cryptic at best. Python has a vibrant
community with numerous initiatives to reach under-served,
under-computed and under-represented groups including &lt;a href="http://www.pyladies.com/"&gt;PyLadies&lt;/a&gt; and
&lt;a href="http://wiki.python.org/moin/DiversityInPython"&gt;other-groups&lt;/a&gt;. R help is notoriously caustic.&lt;/p&gt;
&lt;h1&gt;How caustic?&lt;/h1&gt;
&lt;p&gt;Funny you should ask.  Trey Causey a PhD student at University of
Washington (where R. Doug Martin used to teach statistics and owned
the R predecessor language &lt;a href="http://en.wikipedia.org/wiki/S-PLUS"&gt;S+&lt;/a&gt;) wrote a &lt;a href="http://badhessian.org/2013/04/has-r-help-gotten-meaner-over-time-and-what-does-mancur-olson-have-to-say-about-it/"&gt;blog-post&lt;/a&gt; asking whether R-help
had gotten meaner.  There are 20 comments on his post and it generated
a response article by Columbia's &lt;a href="http://andrewgelman.com/2013/07/10/please-send-all-comments-to-devripley/"&gt;Andrew-Gelman&lt;/a&gt; who has an 35,174
citations and h-index of 63. (That is 63 papers cited at least 63
times.) I took a less sophisticated approach. I read their
&lt;a href="http://www.r-project.org/posting-guide.html"&gt;posting-guide&lt;/a&gt; and answers and I vowed to never ask a question. If I
want to be abused like that I will go find a job on a trading desk.
But searching the archives and other sources, I got by.&lt;/p&gt;
&lt;h1&gt;IPython Notebook&lt;/h1&gt;
&lt;p&gt;I discovered the notebook from this post on R-bloggers back in
November 2012. The browser was a great way to show work across
various operating systems. But whoa, did this mean I actually had
to edit in the browser. Christ! It was like using Word, or
Notepad++.  Surely we can do better. Well I couldn’t, but Takafumi
Arakaki could.  He made the IPython Notebook a mode in Emacs. A
powerful editor, the ability to work interactively and display the
results in the browser where bosses, students and PI’s feel at
home. If you have not set it up, please read my tutorial. But at
the &lt;a href="http://dssg.io/"&gt;Data Science for Social Good&lt;/a&gt; Fellowship.I am looking at data
that is simply to big for my laptop. I needed to run IPython
remotely on an amazon ec2 instance but edit the interactive session
locally.  These servers have no windowing software (x11) and it
violates the terms of service to install it. There were a few
choices.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run IPython remotely (on the instance) and edit it a local
    non-window version of Emacs.&lt;/li&gt;
&lt;li&gt;Run IPython remotely on a public ip over http. (This is a
    &lt;strong&gt;really&lt;/strong&gt; bad idea for reasons I will explain.)&lt;/li&gt;
&lt;li&gt;Run IPython remotely on a public ip over SSL/TLS with a
    password.(A somewhat less bad idea bad idea.)&lt;/li&gt;
&lt;li&gt;Run IPython remotely on a port on the remote localhost, 127.0.0.1
    and forward that port to our local localhost (no typo there) via
    ssh. Then we can pick it when we open the notebook list in
    Emacs. The command is M-x ein:notebooklist-open. 'M' here, is
    'Meta' which on Linux or Windows is mapped to the Alt key and on
    Mac is mapped to the command key.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Why everything sucks but the last option.&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;If you edit on the remote machine you are using Emacs inside the
    bash shell. Any extended key-bindings don't work including the
    bindings for the emacs-ipython notebook (ein). Everytime I wanted
    to execute a cell I had to type &lt;code&gt;M-x
         ein:notebook-execute-and-goto-next&lt;/code&gt; insteand of M-RET. &lt;strong&gt;That sucks!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Run IPython remotely on a public ip over http. Whoa, now we have a
    process listening that can execute linux commands on a shared
    remote computer that is completely unsecured. &lt;strong&gt;That sucks!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Run IPython remotely on a public ip over SSL/TLS with a
    password. Ok, so this is what the IPython documentation
    suggests. Here is the &lt;a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html"&gt;link&lt;/a&gt; and you should also check out this
    github &lt;a href="https://github.com/ipython/ipython-in-depth/blob/master/notebooks/Running%2520a%2520Secure%2520Public%2520Notebook.ipynb"&gt;repo&lt;/a&gt;. The difference is what they name the key and
    certificate but the first set of instructions did not work for me
    while the second did. Choose a good password it probably is no
    worse than buying a book at Amazon. But it still leaves you
    editing in the browser. &lt;strong&gt;That sucks!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Finally the fourth option is confusing but it gets done what we
    want. The important thing to understand is that we need to forward
    the remote machine's local port to our localhost using -L option
    in ssh. The best explanation I could find is &lt;a href="http://www.kirsle.net/blog/kirsle/ssh-port-forwarding"&gt;here&lt;/a&gt; in the section
    on Forwarding Local Ports to Remote. This is hard, but &lt;strong&gt;it does
    not suck!&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Instructions&lt;/h1&gt;
&lt;p&gt;Start on your machine. Set up a .ssh/config file where you define the 
host and identity. Good directions are &lt;a href="http://blog.i-evaluation.com/2012/11/19/ec2-ssh-configuration-with-pem-keys/"&gt;here&lt;/a&gt;. It is worth stating, the
&lt;strong&gt;local&lt;/strong&gt; machine is your laptop and the &lt;strong&gt;remote&lt;/strong&gt; is the server you are
using. The result is that establishing an ssh connection should be as
easy as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh myServer
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Here is a sample config file based on my own. This will not work
    on your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../images/Screenshot-from-2013-07-12-094118-300x191.png" width="300px" alt="img" title="pem"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configure ein. See my &lt;a href="https://github.com/tkf/emacs-ipython-notebook/issues/created_by/EvanMisshula?state%3Dopen"&gt;issue&lt;/a&gt; on the ein repo to set your
    &lt;code&gt;ein:console args&lt;/code&gt; I set up a profile locally rather than used
    sshfs as Takafumi suggested. The directions are in this &lt;a href="https://github.com/ipython/ipython-in-depth/blob/master/notebooks/Running%2520a%2520Secure%2520Public%2520Notebook.ipynb"&gt;repo&lt;/a&gt;. If
    you are using a virtual environment, the configuration will be
    in: &lt;code&gt;~/.config/ipython&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a directory on the remote machine to put your notebook
    files. Start the server normally.&lt;/p&gt;
&lt;p&gt;$ ipython notebook --pylab=inline --no-browser --port=6000&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../images/server-300x191.png" width="300px" alt="img" title="server"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;From another terminal on your local machine:&lt;/p&gt;
&lt;p&gt;$ ssh -N -f -L 7000:127.0.0.1:6000 myServer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../images/bothTerminals-300x168.png" width="300px" alt="img" title="both-terminals"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open emacs. Type: &lt;code&gt;M-x ein:notebooklist-open&lt;/code&gt;. When Emacs asks
    which port say 7000.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Congratulations, you now have an ssh connection to your notebook on a
remote server in local emacs. And you know what, that my friend, &lt;strong&gt;does
not suck at all.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/emacsEditingRemoteNotebook-300x168.png" width="300px" alt="img" title="emacsEditingRemoteNotebook"&gt;&lt;/p&gt;

&lt;p&gt;You can download the R-language by following this &lt;a href="http://cran.us.r-project.org/"&gt;R-link&lt;/a&gt; and Vincent
Goulet generously makes &lt;a href="http://vgoulet.act.ulaval.ca/en/emacs/"&gt;Emacs with ESS&lt;/a&gt; available through his website
for both Mac OS X and Windows.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Fri, 12 Jul 2013 02:41:00 -0400</pubDate><guid>tag:,2013-07-12:emacs-ipython-notebook-and-ess-in-the-cloud.html</guid><category>emacs</category><category>python</category><category>IPython</category><category>Rstats</category><category>ESS</category></item><item><title>Emacs IPython Notebook and the shaving of a Yak</title><link>/emacs-ipython-notebook-and-the-shaving-of-a-yak.html</link><description>&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;It was this week during the project pitch exercise here at the &lt;a href="http://dssg.io/"&gt;Data
Science For Social Good&lt;/a&gt; that I fell down a rabbit hole. I wanted to
get summary statistics on foreclosures and land values for each of
Chicago's 50 wards.  Of course I was not doing that when the well
known data scientist and volunteer mentor &lt;a href="http://shron.net/"&gt;Max Shron&lt;/a&gt; approached me
while I was fiddling with my editor. He politely introduced me to the
concept of a &lt;strong&gt;Yak Shave&lt;/strong&gt;. As the definitive source of programming
slang, the &lt;a href="http://www.catb.org/jargon/html/go01.html"&gt;Jargon file&lt;/a&gt; file defines it:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/yak-300x231.jpg" width="300px" alt="img" title="yak"&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[MIT AI Lab, after 2000: orig. probably from a *Ren &amp;amp; Stimpy episode.*]
Any seemingly pointless activity which is actually necessary to solve a
problem which solves a problem which, several levels of recursion later,
solves the real problem you're working on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now there is some disagreement over whether this is a term of
derision.  &lt;a href="http://en.wiktionary.org/wiki/yak_shaving"&gt;Wiktionary&lt;/a&gt; includes an alternate meaning:&lt;/p&gt;
&lt;p&gt;The actually &lt;a href="http://en.wiktionary.org/wiki/useless"&gt;useless&lt;/a&gt; &lt;a href="http://en.wiktionary.org/wiki/activity"&gt;activity&lt;/a&gt; you do that appears important when you
are consciously or unconsciously procrastinating about a larger
problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought I'd get more work done if I just fixed a problem with my
.emacs file, but then I spent the whole afternoon &lt;em&gt;yak shaving&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="../images/gerwinski-gnu-head-300x300.png" width="300px" alt="img" title="gerwinski-gnu-head"&gt;&lt;/p&gt;

&lt;p&gt;This was what Max was gently chiding me for. After all, I am a PhD
student our lives are devoted to the idea of Yak Shaving, even if we
don't have a name for it. We all want to make our projects work without
admitting to our advisers that we are stuck on step 3 of our weekly 50
part research assignment. So I put down my fiddling and went to the
meeting but I did not forget about it. The culture of our group is
nothing if not polite and friendly.&lt;/p&gt;
&lt;p&gt;Now the truth is that this piece of out is slightly over 1 GB and I
could have done all of my data cleaning in R. However we all know that
Python and Pandas are the better tools and we are trying to come up to
speed quickly.  (For those of us on twitter, &lt;a href="https://github.com/johnmyleswhite"&gt;John Myles White&lt;/a&gt;, has
been working on the next interpreted language to enter the speed wars,
&lt;a href="http://julialang.org/"&gt;Julia&lt;/a&gt;). This idea of yak-shaving had me giggling for an hour. I am a
recent convert to gnu/linux and  the gnu part of that partnership is
&lt;a href="http://www.fsf.org/"&gt;FREE Software&lt;/a&gt; with deep collectivist roots and installation procedures
reminiscent of Dostoevsky novel if it works or years in Gulag if they
don't. Their GNU mascot looks like a close relative of the Yak.&lt;/p&gt;
&lt;h1&gt;Emacs IPython Notebook&lt;/h1&gt;
&lt;p&gt;Even the Wikitionary entry on useless yak shaving mentions the
notoriously arcane .emacs file that needs to be constantly
configured. These days may be coming to an end.  Not that I did not
spend the better part of a sick day fiddling with it to get two pieces
of canonical free software virtuosity, &lt;a href="http://fperez.org"&gt;Fernando Perez&lt;/a&gt;'s &lt;a href="https://github.com/fperez"&gt;IPython&lt;/a&gt; and
&lt;a href="http://stallman.org/"&gt;Richard Stallman&lt;/a&gt;'s &lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; to play together well.  First, I found the
brilliant &lt;a href="https://github.com/tkf/emacs-ipython-notebook"&gt;ein library&lt;/a&gt; by Takafumi Arakaki. But that alone did not
shave the Yak. I had to abandon my ad-hoc plugins for emacs and come
to terms with Emacs' three package managers. It was &lt;a href="http://ergoemacs.org/emacs/emacs_package_system.html"&gt;MELPA tutorial&lt;/a&gt;
from the indefatigable &lt;a href="http://xahlee.blogspot.com/"&gt;Xah Lee&lt;/a&gt; that
worked for me.  Details will follow but here is a screen shot so you
know that it is possible you to shave this Yak! &amp;#x2026;And in a lot less
time than it took me.&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/IpythonNotebookInEmacs-300x298.png" width="300px" alt="img" title="IpythonNotebookInEmacs "&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Tue, 25 Jun 2013 09:02:00 -0400</pubDate><guid>tag:,2013-06-25:emacs-ipython-notebook-and-the-shaving-of-a-yak.html</guid><category>big data</category><category>Emacs</category><category>emacs-ipython-notebook</category><category>ipython</category><category>programmer-humor</category><category>configuration</category><category>emacs</category><category>IPython</category><category>linux</category><category>statistics</category></item><item><title>Setting up a virtual environment with Ipython, numpy and pandas</title><link>/setting-up-a-virtual-environment-with-ipython-numpy-and-pandas.html</link><description>&lt;p&gt;Most of the time you read about setting up virtual environments, it is
for web development. But the same benefits hold for analysis and
research software. You want to be able to reproduce results. It also
increases security not to be adding all the unverified libraries with
machine level privileges. This post is a minor modification of the
&lt;a href="http://technomilk.wordpress.com/2011/07/27/setting-up-our-django-site-environment-with-pythonbrew-and-virtualenv/"&gt;outstanding-tutorial&lt;/a&gt; I have been using for the last few months. Since
it is two years old, there is another version of python and it does
not cover &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt;, I will repeat the steps here.&lt;/p&gt;
&lt;h1&gt;First install Pythonbrew and another version of python&lt;/h1&gt;
&lt;p&gt;I use apt-get in ubuntu so type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~

&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install libsqlite3-dev libbz2-dev libxml2-dev libxslt-dev curl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then get pythonbrew:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="sb"&gt;``&lt;/span&gt;curl -kL http://github.com/utahta/pythonbrew/raw/master/pythonbrew-install &lt;span class="p"&gt;|&lt;/span&gt; bash&lt;span class="sb"&gt;``&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line gets the repository and executes through bash. We will need
to modify the configuration file for bash.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.pythonbrew/etc/bashrc&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget the dot in &lt;code&gt;.bashrc&lt;/code&gt;. Now nothing changes until this file is
executed by the operating system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should complete with no errors. The next step is to install python
2.7.3. It is going to take a few minutes to complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pythonbrew install --verbose 2.7.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we have to tell the system to use this new version of python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pythonbrew use 2.7.3
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Install virtualenv and virtualenvwrapper&lt;/h1&gt;
&lt;p&gt;We have to install virtualenv in the system's python and
virtualenvwrapper in the new python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install python-virtualenv

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line only needs to be executed once. It works for the whole
system. The second one needs to be done for each new python environment
you create. Make a hidden directory to hold the virtual environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/.virtualenvs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following three lines at the end of your .bashrc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;export WORKON_HOME=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.virtualenvs``&lt;/span&gt;
&lt;span class="x"&gt;export VIRTUALENVWRAPPER_PYTHON=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.pythonbrew/pythons/Python-2.7.3/bin/python``&lt;/span&gt;
&lt;span class="x"&gt;source &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;/.pythonbrew/pythons/Python-2.7.3/bin/virtualenvwrapper.sh``&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will need to use an editor. Then you have to reload them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Create the virtual environment&lt;/h1&gt;
&lt;p&gt;To create a virtual environment called 'no-more-drug-war', type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv --no-site-packages no-more-drug-war
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Important libraries&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;So, in order to know what packages we have installed at any time, we
install yolk.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install yolk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do not type sudo! To see what it installed at any time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yolk -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A list of further packages for IPython are available &lt;a href="http://ipython.org/ipython-doc/stable/install/install.html"&gt;here&lt;/a&gt;.
Type these individually and they each may take a few minutes to install.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pyzmq

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pygments

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install tornado

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install nose

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install numpy

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install scipy

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install matplotlib

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pandas
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Turning it on and off&lt;/h1&gt;
&lt;p&gt;Now to get out of your virtual environment, just type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get back in, type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;workon no-more-drug-war
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Good luck!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Tue, 25 Jun 2013 00:56:00 -0400</pubDate><guid>tag:,2013-06-25:setting-up-a-virtual-environment-with-ipython-numpy-and-pandas.html</guid><category>Emacs</category><category>IPython</category><category>virtual env</category><category>linux</category></item><item><title>Emacs-IPython-Notebook Installation Tutorial</title><link>/emacs-ipython-notebook-installation-tutorial.html</link><description>&lt;h1&gt;Packages&lt;/h1&gt;
&lt;p&gt;The Emacs package system is far from perfect. The most proficient
users of Emacs are unaffected by this flaw. Many users of Emacs are
experts who live at the bleeding edge of the linux kernel and gcc
compiler.  This guide is for the mere mortals who have used Emacs for
either its superb integration with R through &lt;a href="http://ess.r-project.org/"&gt;ESS&lt;/a&gt; or the Carsten
Dominick's ubelieveable &lt;a href="http://orgmode.org/"&gt;org-mode&lt;/a&gt; that threatens to make even PhD
students productive. Basic Emacs is extraordinarily powerful and you
can add a few packages with minimal knowledge. Vincent Goulet has
helped thousands of frantic stats students with his &lt;a href="http://vgoulet.act.ulaval.ca/en/emacs/windows/"&gt;Modified Emacs for
Windows&lt;/a&gt; and &lt;a href="http://vgoulet.act.ulaval.ca/en/emacs/mac/"&gt;Mac OSX&lt;/a&gt;. However as you want to move past that you have to
add packages yourself.&lt;/p&gt;
&lt;h1&gt;Gods vs Mortals&lt;/h1&gt;
&lt;p&gt;All packages can be downloaded as source. This can be very tricky as
many packages depend on other packages which can be hard to configure
for us mere mortals. When possible it is advisable to avoid this and
use a trusted repository. A repository pools the effort and when
possible automates the effort involved in keeping up to date. This is
important as bugs and security flaws in all software are discovered
over time. In this tutorial, I am going to install such a
package. Another amazing piece of scientific computing is Fernando
Perez's &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt;. See my &lt;a href="http://evanmisshula.github.io/setting-up-a-virtual-environment-with-nummpy-and-pandas"&gt;other-blog-post&lt;/a&gt; about setting up a virtual
environment for IPython. The notebook whose developed was led by Brian
Granger and Min Reagan Kelly revolutionizes both interactive computing
and computer language pedagogy. No single blog is long enough to
defend such grandiose claims, but I am pretty amazed. I just hate
editing in the browser.&lt;/p&gt;
&lt;h1&gt;The Package Systems&lt;/h1&gt;
&lt;p&gt;The best blog post I found on the emacs package system was from &lt;a href="http://ergoemacs.org/emacs/emacs_package_system.html"&gt;Xah Lee&lt;/a&gt;. I will
work hard to add something here. There are six package systems in emacs
24.x. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://elpa.gnu.org/"&gt;elpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tromey.com/elpa/"&gt;tromey-elpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://marmalade-repo.org/"&gt;marmalade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.milkbox.net/"&gt;milkbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.emacswiki.org/emacs/DELPS"&gt;DELPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.emacswiki.org/emacs/el-get"&gt;el-get&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first is the official system. I am not going to cover tromey,
marmalade-repo or DELPS. I just don't know them yet. I was able to
install other packages successfully in el-get. It did not work for me
with the Emacs-IPython-Notebook.&lt;/p&gt;
&lt;h1&gt;Let's get started&lt;/h1&gt;
&lt;p&gt;So you may not have a .emacs file. This file loads all of your
customization files into emacs. Create it if you don't.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;touch .emacs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now find it &lt;code&gt;C-x C-f ~/.emacs&lt;/code&gt; (The capital 'C' means control.)&lt;/p&gt;
&lt;p&gt;Add the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(setq package-archives &amp;#39;((&amp;quot;gnu&amp;quot; . &amp;quot;http://elpa.gnu.org/packages/&amp;quot;)
 ))

(when (&amp;gt;= emacs-major-version 24)
   (require &amp;#39;package)
   (package-initialize)
   (add-to-list &amp;#39;package-archives &amp;#39;(&amp;quot;melpa&amp;quot; .
&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;) t)
   )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This adds melpa to your repositories. You also need to add the line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(load-theme &amp;#39;zenburn t)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get the zeburn theme (better colors).&lt;/p&gt;
&lt;h1&gt;Package-menu&lt;/h1&gt;
&lt;p&gt;&lt;img src="../images/package-menu-300x298.png" width="300px" alt="img" title="package-menu"&gt;&lt;/p&gt;

&lt;p&gt;Now to list all the available packages. Type &lt;code&gt;M-x
package-list-packages&lt;/code&gt;. (M means Meta on most keyboards that is the
Alt key. Also use tab completion if possible, it helps!) We are going
to take two packages. Takafumi Arakaki's brilliant &lt;a href="https://github.com/tkf/emacs-ipython-notebook"&gt;ein&lt;/a&gt; and the zenburn
theme colors. Type &lt;code&gt;C-s&lt;/code&gt; to search for ein in the package list, not the
github repo. As of now you have to look for the second one in the
file.  Go to the beginning of the line to type &lt;code&gt;i&lt;/code&gt; which marks the
package for installation and x which will signal emacs to actually
install it.  Repeat the same for the zenburn package.&lt;/p&gt;
&lt;h1&gt;Load it into Emacs to see the change&lt;/h1&gt;
&lt;p&gt;But for any of this to work you have to re-run the .emacs file. Type
&lt;code&gt;M-x eval-buffer&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;newColors&lt;/h2&gt;
&lt;p&gt;&lt;img src="../images/newColors-300x171.png" width="300px" alt="img" title="new-colors"&gt;&lt;/p&gt;

&lt;p&gt;If everything works the colors will change. You can examine
repository for this post including a working .emacs file (and my
personal .emacs file) at my github repo which is linked here.&lt;/p&gt;
&lt;p&gt;Now to start the notebook. Go to the directory with a notebook or where
you want to keep them and open a new shell. Type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ipython notebook --pylab&lt;span class="o"&gt;=&lt;/span&gt;inline
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Back in emacs type.&lt;/p&gt;
&lt;p&gt;The pay-off&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;M-x ein:notebooklist-open&lt;/p&gt;
&lt;p&gt;Click on open new notebook and your IPython notebook is in your buffer
where it always belonged.&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/emacsEditingRemoteNotebook-300x168.png" width="300px" alt="img" title="ein"&gt;&lt;/p&gt;

&lt;p&gt;I will cover el-get in the next blog&amp;#x2026;.I promise!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Mon, 24 Jun 2013 23:37:00 -0400</pubDate><guid>tag:,2013-06-24:emacs-ipython-notebook-installation-tutorial.html</guid><category>Emacs</category><category>emacs-ipython-notebook</category><category>ipython</category><category>tutorial</category></item><item><title>Resources on Django and D3</title><link>/resources-on-django-and-d3.html</link><description>&lt;p&gt;It is no secret that I have been working on delivering d3 over django.
I am a novice to both of these technologies, I have been scouring the
internet for FREE resources. Of what I have found. Here are my
impressions. On Django, there seem to be few full tutorials analogous
to &lt;a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book"&gt;Michael Hartle's book&lt;/a&gt;. However what there is works. The early
version's of Michael's book were hell if you did not have the latest
$2,500 Mac. The Django `official tutorial &lt;a href="https://docs.djangoproject.com/en/dev/intro/tutorial01/"&gt;official tutorial&lt;/a&gt; was
manageable. It should really spend time telling you to set up a
virtual environment but you can find that material in &lt;a href="http://technomilk.wordpress.com/2011/07/27/setting-up-our-django-site-environment-with-pythonbrew-and-virtualenv/"&gt;Technomilk&lt;/a&gt;.
There is also a very good &lt;a href="http://www.amazon.com/Practical-Django-Projects-Pratical/dp/1590599969"&gt;book&lt;/a&gt; by John Bennett of Django's main
authors but is behind a pay-wall. The reason that I am switching to
django is that there is a growing number of resources for &lt;a href="http://www.amazon.com/Scientific-Programming-Computational-Science-Engineering/dp/3642302920"&gt;scientific
computation&lt;/a&gt; (apologies, this is behind a pay-wall) in python. I
believe that it will emerge as a successor to the R statistical
language. If you are still using R, you should check out &lt;a href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html"&gt;IPython&lt;/a&gt;,
&lt;a href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;, &lt;a href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt; and &lt;a href="http://www.scipy.org/"&gt;SciPy&lt;/a&gt;. Also I have not finished them, but there is
another FREE (video) tutorial, &lt;a href="http://gettingstartedwithdjango.com/en/lessons/introduction-and-launch/#toc0"&gt;Getting Started with Django&lt;/a&gt;, for after
you have finished the official one.&lt;/p&gt;
&lt;p&gt;The other great strength of R is its graphics, both the base graphics
and &lt;a href="http://ggplot2.org/"&gt;ggplot&lt;/a&gt;. (Truth be told, I found that indecipherable without the
companion &lt;a href="http://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/0387981403"&gt;book&lt;/a&gt;, which is of course behind a pay-wall.) However as data
presentation evolves from static graphs to user interfaces, we need to
move to tools like &lt;a href="http://d3js.org/"&gt;D3.js&lt;/a&gt; which allow us to create graphs from html
styling elements. These are also called svg or css graphics. Right now
there are only two books on the subject. Mike Dewar's &lt;a href="http://shop.oreilly.com/product/0636920025429.do"&gt;Getting Started
with D3&lt;/a&gt; and Scott Murray's &lt;a href="http://shop.oreilly.com/product/0636920025429.do"&gt;Interactive Visualization for the
Web&lt;/a&gt;. Mike's book is strictly limited to D3 and was hard for me to get
a clear idea of what is going on because of my own limitations in HTML
and CSS. Both books say that they are only going to explain D3 but
Murray's book and free &lt;a href="http://ofps.oreilly.com/titles/9781449339739/_introduction.html"&gt;tutorials&lt;/a&gt; explains more of the
background. making it easier to understand what is happening. There
are more small examples so you can draw circle or rectangle before you
draw a scatter plot. Both &lt;a href="https://github.com/mikedewar/getting_started_with_d3"&gt;Mike's&lt;/a&gt; and &lt;a href="https://github.com/alignedleft/d3-book"&gt;Scott's&lt;/a&gt; book make a github
repository available so you can see full examples of what is in the
text. With Mike's book some of what is in the repository is different
than what is printed in the text. This is particularly frustrating on
the Subway wait user interface. This is not to trash Michael's book. I
at least understood something after reading it. Looking at the
documentation from M Bostock made me feel like a complete idiot.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Tue, 02 Apr 2013 11:27:00 -0400</pubDate><guid>tag:,2013-04-02:resources-on-django-and-d3.html</guid><category>D3</category><category>Django</category><category>linux</category></item><item><title>Learning environments for data analysis software</title><link>/learning-environments-for-data-analysis-software.html</link><description>&lt;h1&gt;Welcome to my blog&lt;/h1&gt;
&lt;p&gt;This is my first blog post using the IPython notebook. I am very excited
about the things it can do. &lt;/p&gt;
&lt;h2&gt;Here is what I want to cover&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Who I am&lt;/li&gt;
&lt;li&gt;What the blog will cover&lt;/li&gt;
&lt;li&gt;Why I named it Measure of Justice&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Evan Misshula&lt;/h1&gt;
&lt;p&gt;I am a PhD student in Criminal Justice. I try to use social networks and
data mining to help people make rational decisions about public safety.
I care passionately about people that the world writes off. It is no
shock. There have been many times when I have been written off.&lt;/p&gt;
&lt;h1&gt;Math, Computing, Causality, Networks, Security and Ethics&lt;/h1&gt;
&lt;p&gt;Early in my graduate career, I was struck that we spend a great deal of
effort policing minority communities for drug use which has little
effect on the non-involved but spend way less effort protecting the
banking system from hackers. I also thought that there was a lot to
learn about managing threats from inside by looking at both intrusion
detection and counter- intelligence. Not suprisingly, I believe in
second chances. Who gets those chances and when they come are an area of
great interest.&lt;/p&gt;
&lt;h1&gt;What's in a name?&lt;/h1&gt;
&lt;p&gt;When I studied Stochastic Control, Girsanov's Theorem governed which
measures were deformable into each other. Two measures needed to have
the same sets of measure zero, to equivilent. In other words it is
what we think that is impossible, not unlikely that is important.&lt;/p&gt;
&lt;h1&gt;My favorite new toy&lt;/h1&gt;
&lt;p&gt;I am excited about blogging again because I can now put code and math in
the blog. I have spent a lot of time in graduate school learning new
tools. This blog will hopefully document some of the challenges and help
others find their way. Others blogs have certainly helped me.&lt;/p&gt;
&lt;p&gt;We can assign variables in the ipython notebook.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a=5
print a

5

a=5
b=9 a+b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But you can also reach into the operating system and execute bash
commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pwd

u&amp;#39;/home/evan/Documents/ipython/blog/blog&amp;#39;

ls

120907-Blogging with the IPython Notebook.ipynb EvanNB1.html old/
121120-Back from PyCon Canada 2012.ipynb EvanNB1.ipynb EvanNB1_header.html fig/
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;This is a markdown cell&lt;/h1&gt;
&lt;p&gt;You can &lt;em&gt;italicize&lt;/em&gt; and use &lt;strong&gt;boldface&lt;/strong&gt;. It allows us to comment code
and create interactive presentations. You can build lists of your
favorite tools. Here are mine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux&lt;/li&gt;
&lt;li&gt;emacs&lt;/li&gt;
&lt;li&gt;r statistical language&lt;/li&gt;
&lt;li&gt;Emacs Speaks Statistics&lt;/li&gt;
&lt;li&gt;Org-mode&lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;Sweave&lt;/li&gt;
&lt;li&gt;Ggplot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is most important is to LaTeX support. My favorite math equation
is [ e^{i\pi}+1=0 ]. It can also render math numbered equations:&lt;/p&gt;
&lt;div class="latex"&gt;
e&lt;sup&gt;x&lt;/sup&gt;=\\&amp;sum;\\&lt;sub&gt;j=0&lt;/sub&gt;&lt;sup&gt;\\&amp;infin;&lt;/sup&gt;\\\frac{x^j}{j!}

&lt;/div&gt;

&lt;h1&gt;The browser displays&lt;/h1&gt;
&lt;p&gt;The program can display the numeric or character output of programs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;print &amp;quot;hi Doug&amp;quot;
x=3

hi Doug

x

3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can also display graphs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%pylab&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//IPython.zmq.pylab.backend_inline].&lt;/span&gt;
&lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_line0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;$\&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ro&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;$\&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Two&lt;/span&gt; &lt;span class="n"&gt;familiar&lt;/span&gt; &lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Symbolic Manipulation&lt;/h1&gt;
&lt;p&gt;The IPython notebook can also make symbolic calculations and solve
complex algebraic equations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;sympyprinting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sym&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x y z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;sympyprinting&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nb"&gt;reload&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;reload_ext&lt;/span&gt; &lt;span class="n"&gt;sympyprinting&lt;/span&gt;

&lt;span class="n"&gt;Rational&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="latex"&gt;
\\\frac{3}{2} \\&amp;pi; + \\\frac{e&lt;sup&gt;\\\mathbf{\\imath} x&lt;/sup&gt;}{x&lt;sup&gt;2&lt;/sup&gt; + y&lt;sup&gt;2&lt;/sup&gt;}

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;eq = ((x+y)**3 * (x+3)) eq

\\left(x + 3\\right) \\left(x + y\\right)^{3}

expand(eq)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="latex"&gt;
x&lt;sup&gt;4&lt;/sup&gt; + 3 x&lt;sup&gt;3&lt;/sup&gt; y + 3 x&lt;sup&gt;3&lt;/sup&gt; + 3 x&lt;sup&gt;2&lt;/sup&gt; y&lt;sup&gt;2&lt;/sup&gt; + 9 x&lt;sup&gt;2&lt;/sup&gt; y + x y&lt;sup&gt;3&lt;/sup&gt; + 9
x y&lt;sup&gt;2&lt;/sup&gt; + 3 y&lt;sup&gt;3&lt;/sup&gt;

&lt;/div&gt;

&lt;p&gt;Ipython can even calculate the derivative!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diff(cos(x**2)**2 / (1+x)**2, x)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="latex"&gt;
-   4 \\\frac{x \\\operatorname{sin}\\\left(x&lt;sup&gt;2&lt;/sup&gt;\\\right)\\\operatorname{cos}\\\left(x&lt;sup&gt;2&lt;/sup&gt;\\\right)}{\\\left(x + 1\\\right)&lt;sup&gt;2&lt;/sup&gt;} - 2 \\\frac{\\\operatorname{cos}&lt;sup&gt;2&lt;/sup&gt;\\\left(x&lt;sup&gt;2&lt;/sup&gt;\\\right)}{\\\left(x + 1\\\right)&lt;sup&gt;3&lt;/sup&gt;}

&lt;/div&gt;

&lt;p&gt;It can also display pictures and videos&amp;#x2026;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/home/evan/Pictures/Evan.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/Evan.jpg" width="300px" alt="img" title="Evan"&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTubeVideo&lt;/span&gt;
&lt;span class="n"&gt;YouTubeVideo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ystkKXzt9Wk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe width="560" height="315" src="//www.youtube.com/embed/ystkKXzt9Wk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;We can even use other languages (including R)!!&lt;/h1&gt;
&lt;p&gt;This is because ipython communicates between the kernel and the
browser so it knows how to send data to another interpreter.&lt;/p&gt;
&lt;p&gt;So we can process code from Ruby:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%%ruby puts &amp;quot;Hello from Ruby #{RUBY_VERSION}&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Ruby&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can run bash scripts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%%bash echo &amp;quot;hello from $BASH&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can interact with an R environment:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rpy2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rpy2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;robjects&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;robjects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;
&lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="n"&gt;x86_64&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;
&lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;
&lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="mf"&gt;15.2&lt;/span&gt;
&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;
&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;
&lt;span class="n"&gt;svn&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="mi"&gt;61015&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mf"&gt;2.15&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nickname&lt;/span&gt; &lt;span class="n"&gt;Trick&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;Treat&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;rmagic&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;rmagic&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="nb"&gt;reload&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;reload_ext&lt;/span&gt; &lt;span class="n"&gt;rmagic&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can return R objects to python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;X = np.array([0,1,2,3,4]) Y = np.array([3,5,4,6,7])
%%R -i X,Y -o XYcoef
XYlm = lm(Y~X)
XYcoef = coef(XYlm)
print(summary(XYlm))
par(mfrow=c(2,2))
plot(XYlm)

Call:
lm(formula = Y ~ X)

Residuals:
1 2 3 4 5
-0.2 0.9 -1.0 0.1 0.2

Coefficients:
Estimate Std. Error t value Pr(&amp;gt;|t|)
(Intercept) 3.2000 0.6164 5.191 0.0139 *
X 0.9000 0.2517 3.576 0.0374 *
---
Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.7958 on 3 degrees of freedom
Multiple R-squared: 0.81,   Adjusted R-squared: 0.7467
F-statistic: 12.79 on 1 and 3 DF, p-value: 0.03739
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is more to come. Ipython does d3 interactive graphs but I have
not been able to get them to work. It also handles cython (python
wrapped c-code) and mpi parallel code. More later. It is time for bed.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Sat, 02 Feb 2013 23:32:00 -0500</pubDate><guid>tag:,2013-02-02:learning-environments-for-data-analysis-software.html</guid><category>configuration</category><category>docview</category><category>emacs</category><category>internet pedagogy</category><category>linux</category><category>statistics</category><category>windows</category></item><item><title>Intro and iPython</title><link>/intro-and-ipython.html</link><description>&lt;p&gt;So I was able to get this to post to my &lt;a href="http://EvanMisshula.github.io"&gt;blog&lt;/a&gt;. However I was not
able to get it to work here. Since then, to my surprise I have found
myself working less with the visually amazing, but temperamental iPython
and more with &lt;a href="http://orgmode.org/"&gt;Emacs org-mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The ability to toggle between thirty different languages and output to
html or LaTeX is pretty overwhelming. This is not to say that I have
had no trouble at all. Python sessions were broken for a
while. Overall it has been a pleasant experience. If you are
interested start with the article in &lt;a href="http://www.jstatsoft.org/v46/i03/paper"&gt;the Journal of Statistical
Software&lt;/a&gt;. But that is just the advertisement for what it can do. To
master the usage you should go to the &lt;a href="http://www.jstatsoft.org/v46/i03"&gt;supplementary materials&lt;/a&gt;. You can
download both the source code for the paper and the babel
library. None of this is behind a pay-wall.&lt;/p&gt;
&lt;p&gt;Here are the tricks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The paper uses an initialization file, but you don't need to do
    that. I generally just put an elisp block in the paper and execute
    that.&lt;/li&gt;
&lt;li&gt;They defined a Journal of statistical software class to comply
    with formating requirement. You will generally just output to
    LaTeX.&lt;/li&gt;
&lt;li&gt;Any questions, just reach out to me on Twitter @emisshula&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 02 Jan 2013 21:05:00 -0500</pubDate><guid>tag:,2013-01-02:intro-and-ipython.html</guid><category>Emacs</category><category>org-mode</category><category>reproducible research</category></item><item><title>Two important news pieces on cybercrime</title><link>/two-important-news-pieces-on-cybercrime.html</link><description>&lt;ol&gt;
&lt;li&gt;The FBI is executing warrants against the Wiki-leaks
    supporters.I had long suspected that most of these guys were
    not as tricky (sophisticated) as they thought they
    were. &lt;a href="http://www.mcclatchydc.com/2011/01/27/107589/fbi-serves-40-warrants-in-search.html"&gt;details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another article on government picking at your electronic
    data. Who gets picked for this is a crapshoot. The problem is
    not that they are friending people on facebook to snoop but
    that there are too many illegal acts they can investigate. It
    is time to go after rogue prosecutors, people always go after
    the cop. We need to change direction at the
    top. &lt;a href="http://www.huffingtonpost.com/gw-schulz/when-can-cops-gain-access_b_815211.html"&gt;overciminalization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Fri, 28 Jan 2011 08:19:00 -0500</pubDate><guid>tag:,2011-01-28:two-important-news-pieces-on-cybercrime.html</guid><category>cracking</category><category>security</category><category>vulnerablity</category><category>hacking</category></item><item><title>Released...the film version of the Castle is out</title><link>/released-the-film-version-of-the-castle-is-out.html</link><description>&lt;p&gt;Great week&amp;#x2026;saw a preview of Released, the movie version of 'the
Castle'. It is a great play about four amazing people who are making
the very most of their second chance! &lt;a href="http://www.thecastletheplay.org/tc/frames/About.aspx"&gt;The Castle&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Wed, 26 Jan 2011 11:33:00 -0500</pubDate><guid>tag:,2011-01-26:released-the-film-version-of-the-castle-is-out.html</guid><category>reentry</category><category>antipoverty</category></item><item><title>Introduction</title><link>/introduction.html</link><description>&lt;p&gt;This is the first issue so it is worth saying what I would like to
cover. I am interested in increasing labor market participation and
public safety. I believe that this is done through life long learning and
remediation. I am particularly interested in using mathematics to
decide what is a threat and what is not.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">emisshula</dc:creator><pubDate>Thu, 02 Dec 2010 13:13:00 -0500</pubDate><guid>tag:,2010-12-02:introduction.html</guid><category>software</category><category>justice</category></item></channel></rss>