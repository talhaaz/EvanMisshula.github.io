<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Evan's site</title><link>/</link><description></description><atom:link href="/feeds/evan-misshula.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 07 Jan 2014 20:10:47 -0500</lastBuildDate><item><title>Python Dev Env</title><link>/python-dev-env.html</link><description>&lt;p&gt;Ubuntu: Set up a virtual environment with IPython, numpy and pandas
Posted on January 20, 2014        &lt;/p&gt;
&lt;p&gt;So this is a much needed update for an earlier post on setting up a
virtual environment. The original post was based on one I found
&lt;a href="http://technomilk.wordpress.com/2011/07/27/setting-up-our-django-site-environment-with-pythonbrew-and-virtualenv/"&gt;http://technomilk.wordpress.com/2011/07/27/setting-up-our-django-site-environment-with-pythonbrew-and-virtualenv/&lt;/a&gt;. My prior post is &lt;a href="http://mofj.commons.gc.cuny.edu/2013/06/25/setting-up-a-virtual-environment-with-ipython-numpy-and-pandas/"&gt;http://mofj.commons.gc.cuny.edu/2013/06/25/setting-up-a-virtual-environment-with-ipython-numpy-and-pandas/&lt;/a&gt;. Most of the time you read about setting up virtual environments, it is in the context of web development. But the same benefits hold for analysis and research software. You want to be able to reproduce results. It also increases security not to be adding all
the unverified libraries with root level privileges. This post is a
minor modification of the outstanding tutorial I have been using for
the last few months. There are three reasons why this needs to be updated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there is another version of python&lt;/li&gt;
&lt;li&gt;it does not cover IPython&lt;/li&gt;
&lt;li&gt;pythonbrew which managed the versions of python is longer maintained&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will repeat the steps here. First install the c libraries that python needs to function.&lt;/p&gt;
&lt;p&gt;I use apt-get in ubuntu so type&lt;/p&gt;
&lt;p&gt;$ cd ~&lt;/p&gt;
&lt;p&gt;$ sudo apt-get install libsqlite3-dev libbz2-dev libxml2-dev libxslt-dev curl&lt;/p&gt;
&lt;p&gt;Get a non-system version of python&lt;/p&gt;
&lt;p&gt;Then install the pyenv scripts from source. Here is the link for pyenv &lt;a href="https://github.com/yyuu/pyenv#basic-github-checkout"&gt;https://github.com/yyuu/pyenv#basic-github-checkout&lt;/a&gt;. Pyenv is in many ways more
sophsticated than pythonbrew. It is written in &lt;a href="http://en.wikipedia.org/wiki/Bash_shell"&gt;http://en.wikipedia.org/wiki/Bash_shell&lt;/a&gt; not any particular version of python. The advantage is that it is not
dependent on anything in the language itself. The disadvantage is that it is much harder
to read the code and understand the nature of a bug. As my advisor always used to tell
me there was nothing more brain-dead than a shell, I have spent most of my time avoiding them. I use the Bourne Again Shell that comes with Ubuntu. The syntax is tricky because everything is a string. Variable definitions can’t have any spaces. There are some good tutorials which I will include later. For now, here are three links that can tell you
the differences between bash and an interpreted language like Python.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/110907/python-compared-to-bash"&gt;http://askubuntu.com/questions/110907/python-compared-to-bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/414965/when-to-use-bash-and-when-to-use-perl-python-ruby"&gt;http://superuser.com/questions/414965/when-to-use-bash-and-when-to-use-perl-python-ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/209470/can-i-use-python-as-a-bash-replacement"&gt;http://stackoverflow.com/questions/209470/can-i-use-python-as-a-bash-replacement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am assuming you have git installed. If not, &lt;a href="https://www.digitalocean.com/community/articles/how-to-install-git-on-ubuntu-12-04"&gt;https://www.digitalocean.com/community/articles/how-to-install-git-on-ubuntu-12-04&lt;/a&gt; is a good tutorial for installing git.&lt;/p&gt;
&lt;p&gt;$ cd ~
$ git clone git://github.com/yyuu/pyenv.git .pyenv&lt;/p&gt;
&lt;p&gt;Define environment variable PYENV&lt;sub&gt;ROOT&lt;/sub&gt; to point to the path where
pyenv repo is cloned and add $PYENV&lt;sub&gt;ROOT&lt;/sub&gt;/bin to your $PATH for access
to the pyenv command-line utility.&lt;/p&gt;
&lt;p&gt;$ echo ‘export PYENV&lt;sub&gt;ROOT&lt;/sub&gt;=”$HOME/.pyenv”‘ &amp;gt;&amp;gt; ~/.bashrc
$ echo ‘export PATH=”$PYENV&lt;sub&gt;ROOT&lt;/sub&gt;/bin:$PATH”‘ &amp;gt;&amp;gt; ~/.bashrc&lt;/p&gt;
&lt;p&gt;Add pyenv init to your shell to enable shims and autocompletion. Shims and binstubs are worth knowing about.  You can read up on them &lt;a href="https://github.com/yyuu/pyenv#understanding-shims"&gt;https://github.com/yyuu/pyenv#understanding-shims&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;$ echo ‘eval “$(pyenv init -)”‘ &amp;gt;&amp;gt; ~/.bashrc&lt;/p&gt;
&lt;p&gt;Restart your shell so the path changes take effect. You can now begin using pyenv.&lt;/p&gt;
&lt;p&gt;$ exec $SHELL&lt;/p&gt;
&lt;p&gt;Install Python versions into $PYENV&lt;sub&gt;ROOT&lt;/sub&gt;/versions. For example, to install Python 2.7.5, download and unpack the source, then run:&lt;/p&gt;
&lt;p&gt;$ pyenv install 2.7.5
$ pyenv rehash&lt;/p&gt;
&lt;p&gt;And now we have to tell the system to use this new version of python&lt;/p&gt;
&lt;p&gt;$ pyenv local 2.7.5&lt;/p&gt;
&lt;p&gt;Install virtualenv&lt;/p&gt;
&lt;p&gt;We are going to do two tricky things we are going to install
virtualenv in the version of python AND install the pyenv plugin virtualenv.&lt;/p&gt;
&lt;p&gt;$ pip install virtualenv&lt;/p&gt;
&lt;p&gt;and to install the pyenv plugin.&lt;/p&gt;
&lt;p&gt;$ git clone git://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv&lt;/p&gt;
&lt;p&gt;You are now ready to create a virtual environment in a non-system version of python. I don’t understand why this will not work if you are anywhere else.&lt;/p&gt;
&lt;p&gt;$ cd ~/.pyenv/versions/2.7.5
$ pyenv virtualenv&lt;/p&gt;
&lt;p&gt;We can list all of the virtual environments. Change directory to the
one you want to work in and in my case the virtual environment is
no-more-drug-war:&lt;/p&gt;
&lt;p&gt;$ pyenv shell no-more-drug-war:&lt;/p&gt;
&lt;p&gt;We can list the virtualenvs:&lt;/p&gt;
&lt;p&gt;$ pyenv virtualenvs
dssg (created from /usr)
lc (created from /usr)&lt;/p&gt;
&lt;h1&gt;no-more-drug-war (created from /usr)&lt;/h1&gt;
&lt;p&gt;scrp (created from /usr)
seek (created from /usr)&lt;/p&gt;
&lt;p&gt;We can activate the virtual environment with the following command.&lt;/p&gt;
&lt;p&gt;$ pyenv activate no-more-drug-war&lt;/p&gt;
&lt;p&gt;You can deactivate the activate’d virtualenv by pyenv deactivate.&lt;/p&gt;
&lt;p&gt;$ pyenv deactivate&lt;/p&gt;
&lt;p&gt;So, in order to know what packages we have installed at any time, we install yolk.&lt;/p&gt;
&lt;p&gt;$ pip install yolk&lt;/p&gt;
&lt;p&gt;Do not type sudo! To see what it installed at any time:&lt;/p&gt;
&lt;p&gt;$ yolk -l&lt;/p&gt;
&lt;p&gt;A list of further packages for IPython are available here. Type these individually and they each may take a few minutes to install.&lt;/p&gt;
&lt;p&gt;$ pip install jinja2&lt;/p&gt;
&lt;p&gt;$ pip install pyzmq&lt;/p&gt;
&lt;p&gt;$ pip install pygments&lt;/p&gt;
&lt;p&gt;$ pip install tornado&lt;/p&gt;
&lt;p&gt;$ pip install nose&lt;/p&gt;
&lt;p&gt;$ pip install numpy&lt;/p&gt;
&lt;p&gt;$ pip install scipy&lt;/p&gt;
&lt;p&gt;$ pip install matplotlib&lt;/p&gt;
&lt;p&gt;$ pip install pandas&lt;/p&gt;
&lt;p&gt;$ pip install ipython&lt;/p&gt;
&lt;p&gt;Turning it on and off&lt;/p&gt;
&lt;p&gt;Now to get out of your virtual environment, just type&lt;/p&gt;
&lt;p&gt;$ pyenv deactivate&lt;/p&gt;
&lt;p&gt;To get back in, type:&lt;/p&gt;
&lt;p&gt;$ pyenv activate no-more-drug-war&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;p&gt;I will try to send a pull request to add some of this to pyenv and correct my question on stack overlfow.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Evan Misshula</dc:creator><pubDate>Tue, 07 Jan 2014 20:10:47 -0500</pubDate><guid>tag:,2014-01-07:python-dev-env.html</guid><category>Python</category><category>environments</category><category>virtualization</category></item></channel></rss>